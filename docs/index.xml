<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rudy&#39;s blog on Rudy&#39;s blog</title>
    <link>https://rudy.org.cn/</link>
    <description>Recent content in Rudy&#39;s blog on Rudy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 05 Nov 2019 19:10:13 +0800</lastBuildDate>
    <atom:link href="https://rudy.org.cn/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>《十倍工作法，寻找最佳实践》笔记</title>
      <link>https://rudy.org.cn/2019/manage_decuple-work-means/</link>
      <pubDate>Tue, 05 Nov 2019 19:10:13 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/manage_decuple-work-means/</guid>
      <description>

&lt;h2 id=&#34;以3个思考问题为核心的思考框架&#34;&gt;以3个思考问题为核心的思考框架&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Where are we?（我们现在在哪？） 现状&lt;/li&gt;
&lt;li&gt;Where are we going?（我们要到哪儿去？）目标&lt;/li&gt;
&lt;li&gt;How can we get there?（我们如何到达那里？）实现路径&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;整个工作法以4个思考原则展开讨论&#34;&gt;整个工作法以4个思考原则展开讨论&lt;/h2&gt;

&lt;h3 id=&#34;以终为始-确定好真实目标&#34;&gt;&lt;strong&gt;以终为始，确定好真实目标&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;遇到事情倒着想，首先描述要做的事情，包括背景和意义，然后先写用户使用文档，最后再写代码。&lt;/li&gt;
&lt;li&gt;DOD （Definition of Done，完成的定义）-做任何事情，先定义完成标准，可以固化到流程，是一种有效协作方式&lt;/li&gt;
&lt;li&gt;检查项清单&lt;/li&gt;
&lt;li&gt;梳理依赖，确定边界，用“用户故事”描述需求，定义验收标准（正常流程和异常流程）&lt;/li&gt;
&lt;li&gt;交付物不是代码，是可工作的软件，如何做好集成？&lt;/li&gt;
&lt;li&gt;最小可行产品 MVP（Minimum Viable Product），默认所有的需求都不做，知道弄清楚为什么这么做。&lt;/li&gt;
&lt;li&gt;《精益创业》

&lt;ul&gt;
&lt;li&gt;精益创业的方法论里，提出“开发（build）-测量（measure）-认知（learn）”这样一个反馈循环。就是说，当你有了一个新的想法（idea）时，就把想法开发成产品（code）投入市场，然后，收集数据（data）获取反馈，看看前面的想法是不是靠谱。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;得到的结果无非是两种：好想法继续加强，不靠谱的想法丢掉算了。不管是哪种结果，你都会产生新的想法，再进入到下一个循环里。在这个反馈循环中，你所获得的认知是最重要的，因为它是经过验证的。在精益创业中，这也是一个很重要的概念：经过验证的认知（Validated Learning）。&lt;/li&gt;
&lt;li&gt;扩大自己工作的上下文，在更高的维度思考问题。&lt;/li&gt;
&lt;li&gt;不同角色工作真正的差异在于上下文的差异。在一个局部上下文难以解决的问题，换到另外一个上下文甚至是可以不解决的。所以说无论单点有多努力也只是局部优化，很难达到最优的效果。&lt;/li&gt;
&lt;li&gt;想把工作做好，就需要不断扩大自己工作的上下文，多了解一下别人的工作逻辑是什么样的，认识软件开发的全生命周期。&lt;/li&gt;
&lt;li&gt;在动手做一件事之前，先推演一番。&lt;/li&gt;
&lt;li&gt;问一下自己，我的工作是不是可以用数字衡量。大数据时代，可视化的价值，定义好测量工作的有效性指标&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;迭代考虑项&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-01&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-01.png&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;任务分解-找到实施路径&#34;&gt;&lt;strong&gt;任务分解，找到实施路径&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;动手做一项工作之前，首先进行任务分解。&lt;/li&gt;
&lt;li&gt;最佳实践称之为测试金字塔，它强调的重点是，越底层的测试应该写得越多。只有按照测试金字塔的方式写测试，持续集成才能更好地发挥作用。&lt;/li&gt;
&lt;li&gt;多写单元测试。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-02&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-02.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TDD测试驱动开发已经是行业中的优秀实践，学习测试驱动开发的第一步是，记住测试驱动开发的节奏：红——绿——重构。把测试放在前面，还带来了视角的转变，要编写可测的代码。&lt;/li&gt;
&lt;li&gt;将任务拆小，越小越好。&lt;/li&gt;
&lt;li&gt;按照完整实现一个需求的顺序去安排分解出来的任务。&lt;/li&gt;
&lt;li&gt;测试一定要写断言。&lt;/li&gt;
&lt;li&gt;一段旅程（A-TRIP）

&lt;ul&gt;
&lt;li&gt;怎么样的测试算是好的测试呢？有人做了一个总结 A-TRIP，这是五个单词的缩写，分别是&lt;/li&gt;
&lt;li&gt;Automatic，自动化；&lt;/li&gt;
&lt;li&gt;Thorough，全面的；&lt;/li&gt;
&lt;li&gt;Repeatable，可重复的；&lt;/li&gt;
&lt;li&gt;Independent，独立的；&lt;/li&gt;
&lt;li&gt;Professional，专业的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;绝大多数问题都是由于分解的粒度太大造成的，少有因为粒度太小而出问题的。&lt;/li&gt;
&lt;li&gt;想要管理好需求，先把需求拆小。&lt;/li&gt;
&lt;li&gt;评价用户故事有一个“ INVEST 原则”，这是六个单词的缩写，分别是：

&lt;ul&gt;
&lt;li&gt;Independent，独立的。一个用户故事应该完成一个独立的功能，尽可能不依赖于其它用户故事，因为彼此依赖的用户故事会让管理优先级、预估工作量都变得更加困难。如果真的有依赖，一种好的做法是，将依赖部分拆出来，重新调整。&lt;/li&gt;
&lt;li&gt;Negotiable，可协商的。有事大家商量是一起工作的前提，我们无法保证所有的细节都能100%落实到用户故事里，这个时候最好的办法是大家商量。它也是满足其它评判标准的前提，就像前面提到的，一个用户故事不独立，需要分解，这也需要大家一起商量的。&lt;/li&gt;
&lt;li&gt;Valuable，有价值的。一个用户故事都应该有其自身价值，这一项应该最容易理解，没有价值的事不做。但正如我们一直在说的那样，做任何一个事情之前，先问问价值所在。&lt;/li&gt;
&lt;li&gt;Estimatable，可估算的。我们会利用用户故事估算的结果安排后续的工作计划。不能估算的用户故事，要么是因为有很多不确定的因素，要么是因为需求还是太大，这样的故事还没有到一个能开发的状态，还需要产品经理进一步分析。&lt;/li&gt;
&lt;li&gt;Small，小。步子大了，不行。不能在一定时间内完成的用户故事只应该有一个结果，拆分。小的用户故事才方便调度，才好安排工作。&lt;/li&gt;
&lt;li&gt;Testable，可测试的。不能测试谁知道你做得对不对。这个是我们在前面已经强调过的内容，也就是验收标准，你得知道怎样才算是工作完成。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-03&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-03.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;按照时间管理的理念，重要且紧急的事情要立即做。重要但不紧急的事情应该是我们重点投入精力的地方。紧急但不重要的事情，可以委托别人做。不重要不紧急的事情，尽量少做。&lt;/li&gt;
&lt;li&gt;需求分解之后，最重要的是，排列需求的优先级。&lt;/li&gt;
&lt;li&gt;需求分解成一个个小块，其实也分解了原本合一的上下文。如果想要有效地管理需求，尤其是确定事情的重要程度，一种方式是找回丢失的上下文。如果我们自己无法判断上下文，一种好的办法是，引入外部更大的上下文。&lt;/li&gt;
&lt;li&gt;我们要做的是验证一个想法的可行性，甚至不是为了开发一个软件，开发软件只是一种验证手段。&lt;/li&gt;
&lt;li&gt;不是一个模块做得有多完整，而一条用户路径是否通畅。&lt;/li&gt;
&lt;li&gt;做好产品开发，最可行的方式是采用 最小可行产品（Minimum Viable Product，MVP）。&lt;/li&gt;
&lt;li&gt;最小可行产品就是“刚刚好”满足客户需求的产品。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;沟通反馈-解决与人打交道出现的问题&#34;&gt;&lt;strong&gt;沟通反馈，解决与人打交道出现的问题&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;通过沟通反馈，不断升级自己的编解码能力。&lt;/li&gt;
&lt;li&gt;用业务的语言写代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-04&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-04.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;站会。之所以采用站会的方式，就是要控制时间。在站会上每个人说什么，我给了你一个建议的格式：

&lt;ul&gt;
&lt;li&gt;我昨天做了什么？&lt;/li&gt;
&lt;li&gt;我今天打算做什么？&lt;/li&gt;
&lt;li&gt;我在过程中遇到了什么问题，需要请求帮助。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;多面对面沟通，少开会。&lt;/li&gt;
&lt;li&gt;人的大脑更擅长处理图像。&lt;/li&gt;
&lt;li&gt;多尝试用可视化的方式进行沟通。&lt;/li&gt;
&lt;li&gt;雷达图、流程图、UML 等。&lt;/li&gt;
&lt;li&gt;看板。看板把工作分成了几个不同的阶段，在看板上对应不同的列，然后，每个任务作为一张卡贴在上面。每完成一张卡，就把这张卡挪到下一个阶段。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-05&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-05.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;做好持续集成的关键在于，快速反馈。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-06&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-06.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;定期复盘，找准问题根因，不断改善。&lt;/li&gt;
&lt;li&gt;多走近用户，聆听用户声音，做对用户有价值的产品。&lt;/li&gt;
&lt;li&gt;能用尽可能小的时间颗粒度来安排自己的工作。&lt;/li&gt;
&lt;li&gt;在工作中要拓展自己的上下文，将自己放在更大的范围、平台上去思考问题，主动发掘问题关键点，在面对不同职能人员间沟通时，多运用“以终为始”模块中的知识尝试解决分歧，达成共识。&lt;/li&gt;
&lt;li&gt;一旦有困难，尽早暴露问题，寻求帮助。&lt;/li&gt;
&lt;li&gt;多输出，让知识更有结构。&lt;/li&gt;
&lt;li&gt;金字塔原理。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-07&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-07.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;持续集成的价值在于，它是一条主线，可以将诸多实践贯穿起来。&lt;/li&gt;
&lt;li&gt;做好持续集成的关键是，快速反馈。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-08&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-08.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-09&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-09.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;重构，本质上就是一个“微操作”的实践。你需要把做的代码调整分解成若干可以单独进行的“重构”小动作，然后，一步一步完成它。&lt;/li&gt;
&lt;li&gt;函数式编程已然成为时代的主流。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;自动化-解决与机器打交道出现的问题&#34;&gt;&lt;strong&gt;自动化，解决与机器打交道出现的问题&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;学习自动化，先要知道哪些东西不要自动化，尽最大的努力不做浪费时间的事。一方面，我们要从需求上规避那些没必要做的事；另一方面，我们也从自身防止 NIH 综合症（Not Invented Here Syndrome），争取做一个懒惰的程序员。&lt;/li&gt;
&lt;li&gt;NIH 是什么意思？就是有人特别看不上别人做的东西，非要自己做出一套来，原因只是因为那个东西不是我做的，可能存在各种问题。&lt;/li&gt;
&lt;li&gt;不懂软件设计，只会被各种层出不穷的工具和框架淘汰。&lt;/li&gt;
&lt;li&gt;将你的工作过程自动化。&lt;/li&gt;
&lt;li&gt;有体系地学习运维知识。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-10&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-10.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-11&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-11.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-12&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-12.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevOps 是将开发（Development）和运维（Operations）组合在了一起。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-13&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-13.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;持续交付，是一种让软件随时处于可以部署到生产环境的能力。让软件具备部署到生产环境的能力，这里面有两个关键点：验证发布包和部署。&lt;/li&gt;
&lt;li&gt;验证发布包，不仅是功能上的验证，还包括与环境结合在一起的验证。所以，通常会用几个不同的环境验证，每一个环境都是一个单独的阶段，一个阶段不通过，是不能进入下一阶段的，这种按照不同阶段组织构建的方式，称之为构建流水线（Build Pipeline）。&lt;/li&gt;
&lt;li&gt;今天定义交付，不再是一个发布包，而是一个可以部署的镜像。&lt;/li&gt;
&lt;li&gt;BDD（Behavior Driven Development）用业务的视角描述测试用例。&lt;/li&gt;
&lt;li&gt;将验收测试自动化。&lt;/li&gt;
&lt;li&gt;按照设计原则而不是设计模式重构代码，先有设计模式，再有设计模式。&lt;/li&gt;
&lt;li&gt;Robert Martin 提出的面向对象设计原则：SOLID，这其实是五个设计原则的缩写，分别是

&lt;ul&gt;
&lt;li&gt;单一职责原则（Single responsibility principle，SRP）&lt;/li&gt;
&lt;li&gt;开放封闭原则（Open–closed principle，OCP）&lt;/li&gt;
&lt;li&gt;Liskov 替换原则（Liskov substitution principle，LSP）&lt;/li&gt;
&lt;li&gt;接口隔离原则（Interface segregation principle，ISP）&lt;/li&gt;
&lt;li&gt;依赖倒置原则（Dependency inversion principle，DIP）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;把函数写短。&lt;/li&gt;
&lt;li&gt;人们擅长解决的是小问题，大问题怎么办？拆小了就好。&lt;/li&gt;
&lt;li&gt;分层架构，实际上，就是一种在设计上的分解。&lt;/li&gt;
&lt;li&gt;构建好你的领域模型（Domain Model），指的是服务层。领域模型中一个重要的组成部分：领域对象。领域对象中不应只包含数据访问，也就是常说的 getter 和 setter，还应该有业务逻辑。&lt;/li&gt;
&lt;li&gt;你的领域层只依赖于你的领域对象，第三方发过来的内容先做一次转换，转换成你的领域对象。这种做法称为防腐层。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-14&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-14.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;领域驱动设计（Domain Driven Design，DDD）&lt;/li&gt;
&lt;li&gt;领域特定语言（Domain Specific Language，DSL）&lt;/li&gt;
&lt;li&gt;用简单技术解决问题，直到问题变复杂。&lt;/li&gt;
&lt;li&gt;领域驱动设计（Domain Driven Design，DDD）是 Eric Evans 提出的从系统分析到软件建模的一套方法论。它要解决什么问题呢？就是将业务概念和业务规则转换成软件系统中概念和规则，从而降低或隐藏业务复杂性，使系统具有更好的扩展性，以应对复杂多变的现实业务问题。&lt;/li&gt;
&lt;li&gt;DDD 到底讲了什么呢？它把你的思考起点，从技术的角度拉到了业务上。&lt;/li&gt;
&lt;li&gt;DDD 分为战略设计（Strategic Design）和战术设计（Tactical Design）。&lt;/li&gt;
&lt;li&gt;战略设计是高层设计，它帮我们将系统切分成不同的领域，并处理不同领域的关系。&lt;/li&gt;
&lt;li&gt;战术设计，通常是指在一个领域内，在技术层面上如何组织好不同的领域对象。&lt;/li&gt;
&lt;li&gt;学习领域驱动设计。&lt;/li&gt;
&lt;li&gt;看到差距之后，我唯一能做的，就是自己下来偷偷练习。幸好，无论是快捷键也好，重构也罢，都是可以单独练习的。花上一段时间就可以提高到一定的水平。&lt;/li&gt;
&lt;li&gt;入职新公司，了解的优先级是业务，技术（技术栈，技术架构，功能模块），团队运作（协作方式）。&lt;/li&gt;
&lt;li&gt;了解一个项目，从大图景开始。大多数程序员习惯的工作方式，往往是从细节入手，很难建立起一个完整的图景，常常是“只见树木不见森林”，而我的方式则是从大到小、由外而内，将要了解的内容层层分解，有了大图景之后，很容易知道自己做的事情到底在整体上处于什么样的位置。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-15&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-15.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先尝试重构你的代码，尽可能在已有代码上做小步调整，不要走到大规模改造的路上，因为重构的成本是最低的。&lt;/li&gt;
&lt;li&gt;如果你的“小模块”是一个系统，那就部署新老两套系统，在前面的流量入口做控制，逐步把流量从老系统转到新系统上去；如果“小模块”只在代码层面，那就要有一段分发的代码，根据参数将流程转到不同的代码上去，然后，根据开发的进展，逐步减少对老代码的调用，一直到完全不依赖于老代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-16&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-16.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要想代码腐化的速度不那么快，一定要在软件设计上多下功夫。一方面，建立好领域模型，另一方面，寻找行业对于系统构建的最新理解。&lt;/li&gt;
&lt;li&gt;改造遗留系统，一个关键点就是，不要回到老路上。&lt;/li&gt;
&lt;li&gt;只要产品还在发展，系统改造就是不可避免的。改造遗留系统，前提条件是要弄清楚现状，知道系统为什么要改造，是架构有问题，还是领域模型混乱，只有知道根因，才可能有的放矢地进行改造。&lt;/li&gt;
&lt;li&gt;改造遗留系统，我给你几个建议：

&lt;ul&gt;
&lt;li&gt;构建测试防护网，保证新老模块功能一致；&lt;/li&gt;
&lt;li&gt;分成小块，逐步替换；&lt;/li&gt;
&lt;li&gt;构建好领域模型；&lt;/li&gt;
&lt;li&gt;寻找行业中关于系统构建的最新理解。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;小步改造遗留系统，不要回到老路上。&lt;/li&gt;
&lt;li&gt;IT 行业在国内的大发展也就最近20多年的事，行业里很少有走过完整职业生涯的程序员。也正是因为如此，我们经常会产生了各种焦虑：

&lt;ul&gt;
&lt;li&gt;我刚刚入行时，有人问，程序员能做到30岁吗？&lt;/li&gt;
&lt;li&gt;我快30岁时，有人问，35岁还能做程序员吗？&lt;/li&gt;
&lt;li&gt;我35岁时，讨论变成了40岁的程序员该怎么办。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-17&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-17.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有了“一专”，“多能”才是有意义的，否则，就是低水平重复，而这正是很多人职业生涯不见起色的真正原因。&lt;/li&gt;
&lt;li&gt;这里的“专”不是熟练，而是深入。你可能是个有着10年丰富经验的程序员，但实际上只不过是重复了10年解决同样难度的问题而已，这根本就不算深入，也就没有做到真正意义上的“一专”。&lt;/li&gt;
&lt;li&gt;当你有了“一专”，拓展“多能”，就会拥有更宽广的职业道路。比如，我拥有了深厚的技术功底，通晓怎么做软件：

&lt;ul&gt;
&lt;li&gt;如果还能够带着其他人一起做好，就成了技术领导者。&lt;/li&gt;
&lt;li&gt;如果能够分享技术的理解，就有机会成为培训师。&lt;/li&gt;
&lt;li&gt;如果能够在实战中帮助别人解决问题，就可以成为咨询师。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;反过来，当你有了“多能”，也可以拓宽你的视野，帮你认清自己的“一专”怎样更好地发挥价值，而不是狭隘地认为自己有了技术，就已经天下尽在掌握了。视野窄，缺乏大局观，也成为了许多程序员再进一步的阻碍。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;既然要朝着行业中的专家方向努力，那你就得知道行业中的专家是什么样。我的一个建议是，向行业中的大师学习。读这些大师写的书的一个好处在于，你的视野会打开，不会把目标放在“用别人已经打造好的工具做一个特定的需求”，虽然这可能是你的必经之路，但那只是沿途的风景，而不是目标。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;怎么才能让自己的水平不断提高呢？找一个好问题去解决，解决了一个好的问题能够让你的水平快速得到提升。什么是好问题？就是比你当前能力略高一点的问题，比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果你还什么都不会，那有一份编程的工作就好。&lt;/li&gt;
&lt;li&gt;如果你已经能够写好普通的代码，就应该尝试去编写程序库。&lt;/li&gt;
&lt;li&gt;如果实现一个具体功能都没问题了，那就去做设计，让程序有更好的组织。&lt;/li&gt;
&lt;li&gt;如果你已经能完成一个普通的系统设计，那就应该去设计业务量更大的系统。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;decuple-18&#34; src=&#34;https://rudyarchitect.github.io/blog-images/manage/manage_decuple-18.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最内层是舒适区（Comfort Zone），置身其中会让人感觉良好，但也会因为没有挑战，成长甚微，你可以把它理解成做你最熟悉的事情。&lt;/li&gt;
&lt;li&gt;最外层是恐慌区（Panic Zone），这是压力极大的地方，完全超出了你的能力范围，你在其中只会感到无比的焦虑。&lt;/li&gt;
&lt;li&gt;中间的是学习区（Learning Zone），事情有难度，又刚好是你努力一下可以完成的，这才是成长最快的区域。&lt;/li&gt;
&lt;li&gt;IT 行业依然是一个非常有前景的行业，但想在这条路上走好，需要我们成为 “T ”型人才，也就是“一专多能”。一专多能的前提是“一专”，让自己成为某个方面的专家。这个专家要放在行业的标准去看，这才能降低因为一个公司的波动而造成的影响。&lt;/li&gt;
&lt;li&gt;成为行业专家，要向行业的大师学习，给自己定下一个高的目标，然后是脚踏实地，找适合自己的问题去解决，让自己一直在学习区成长。&lt;/li&gt;
&lt;li&gt;在学习区工作和成长。&lt;/li&gt;
&lt;li&gt;外部系统对你来说，应该只是一个接口。&lt;/li&gt;
&lt;li&gt;能模拟的就模拟，能本地的就本地。&lt;/li&gt;
&lt;li&gt;关于外部系统的测试，你可以先通过接口隔离开来，然后，通过模拟服务或本地可控的方式进行测试。&lt;/li&gt;
&lt;li&gt;所谓的算法优化，其实就是尽可能利用已知的信息，少做不必要的事。&lt;/li&gt;
&lt;li&gt;我在这个专栏真正探讨的主题是，有效工作。&lt;/li&gt;
&lt;li&gt;有效工作，需要我们把力量聚焦到正确的地方，做本质复杂度（Essential Complexity）的事情，少做无意义的事情。&lt;/li&gt;
&lt;li&gt;怎么才能有效工作呢？小结一下就是：

&lt;ul&gt;
&lt;li&gt;拓展自己的上下文，看到真正的目标，更好地对准靶子，比如，多了解用户，才不至于做错了方向；站在公司的层面上，才知道哪个任务优先级更高；站在行业的角度，而不局限于只在公司内成为高手，等等。&lt;/li&gt;
&lt;li&gt;去掉不必要的内容，减少浪费，比如，花时间分析需求，不做非必要的功能；花时间做好领域设计，别围着特定技术打转；花时间做好自动化，把精力集中在编码上，等等。&lt;/li&gt;
&lt;li&gt;要想有效工作，有两点非常重要。一方面，意识上要注意自己工作中无效的部分。这就像一个开关，拨过去就好了。另一方面，要构建自己关于软件开发的知识体系，这是要花时间积累的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>创业者对西游记的另一种感悟</title>
      <link>https://rudy.org.cn/2019/life_liangning-thinking/</link>
      <pubDate>Mon, 28 Oct 2019 18:54:22 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/life_liangning-thinking/</guid>
      <description>

&lt;h2 id=&#34;梁宁&#34;&gt;梁宁&lt;/h2&gt;

&lt;p&gt;作为一个创业者，回头再看《西游记》，另有一番体会。&lt;/p&gt;

&lt;p&gt;当唐僧到达西天的时候，他突然发现，其实一直以来，只有他孤身一人走在取经路上。&lt;/p&gt;

&lt;p&gt;没有孙悟空、没有猪八戒、没有沙和尚，所有的角色，都是他幻想出来陪伴自己的另一个自己。&lt;/p&gt;

&lt;p&gt;孙悟空，是那个无所畏惧、永不服输，上天下海寻求解决问题的自己。&lt;/p&gt;

&lt;p&gt;猪八戒，是那个真实的人性，会害怕、想退缩，也想舒服一点放松一点的自己。&lt;/p&gt;

&lt;p&gt;而沙和尚，更是个有意思的角色，创业的漫漫长路，你内心觉得自己是孙悟空，其实别人看你是沙和尚。一个没有什么特别资质、闷着头、一步一步向前走的笨家伙。&lt;/p&gt;

&lt;p&gt;唐僧呢？也许你在外头，看上去是孙悟空，是猪八戒，或者沙和尚，而你的内心，只能是唐僧。&lt;/p&gt;

&lt;p&gt;唐僧就是啥本事都可以没有，但有一个使命，一念执着。&lt;/p&gt;

&lt;p&gt;他说：我要去西天取经。&lt;/p&gt;

&lt;p&gt;一路上，他哭过，绝望过，软弱过，向人求救，但从来没有说过一句：我们放弃吧，我们回家。&lt;/p&gt;

&lt;p&gt;因为你的使命，你的执着，才会召唤力量，大山和沙漠都不能阻挡，满天神佛都会来帮你。&lt;/p&gt;

&lt;p&gt;所以，最强大的，不是悟空，是唐僧；最强大的，不是技能，是使命。&lt;/p&gt;

&lt;p&gt;这就是我在《增长思维》中谈的，可以撬动增长杠杆的那个支点。&lt;/p&gt;

&lt;p&gt;所以我说，成功不是干出来的，是活出来的。&lt;/p&gt;

&lt;p&gt;让你真实感知世界的，不是你头脑中的知识，而是你的伤口。&lt;/p&gt;

&lt;p&gt;让你强大到可以撬动这个世界的，不是你的技能，而是你的使命。&lt;/p&gt;

&lt;p&gt;“使命”这个词，从字面上看，就是“你怎么使你这条命”。&lt;/p&gt;

&lt;p&gt;唐僧这条命，就是拿来去西天取经的。取经人，死在取经路上，无怨无悔。这就是使命。&lt;/p&gt;

&lt;p&gt;不知不觉，我们这群伴随中国IT互联网成长起来的人，都走近了知天命之年。就是会开始想，自己这条命，到底是拿来做什么的。&lt;/p&gt;

&lt;p&gt;生命就是时间，这个动作，那个动作，这个项目，那个项目，一切都要花时间。而生命的能量就不知不觉地耗散在一件又一件的事情里。&lt;/p&gt;

&lt;h2 id=&#34;我的体会&#34;&gt;我的体会&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静静的一想，原来我也已过而立之年，距离不惑也不是遥不可及，偶然间读了梁宁关于《西游记》的感悟，让我想起来曾经看过的一部电影《美丽心灵》，相似之处在于人格分裂的描述。以前不是很懂梦想和努力，也不明白很多人为了一种信念坚持做一件事很多年，阿甘为什么会成功，其实他不聪明，单亲家庭，而且还有残疾，但是他却成了美国梦的一种。其实你现在会什么并不重要，重要的是你的梦想是什么，也就是你准备为什么事业而终身奋斗，人活着永远不要丢失方向。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果你一直等的伯乐没有出现，可能那个伯乐就是自己一直幻想的另一个自己。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>chrome插件笔记</title>
      <link>https://rudy.org.cn/2019/frontend_chrome-extension-note/</link>
      <pubDate>Wed, 23 Oct 2019 09:44:42 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/frontend_chrome-extension-note/</guid>
      <description>

&lt;p&gt;chrome extenstion是一个使用web技术开发、用来增强浏览器功能的插件，它实际上是一个由html,js,css,images等资源组成的.crx压缩包。&lt;/p&gt;

&lt;h2 id=&#34;manifest-json&#34;&gt;manifest.json&lt;/h2&gt;

&lt;p&gt;用来描述插件的元数据&lt;/p&gt;

&lt;h2 id=&#34;3种资源文件&#34;&gt;3种资源文件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;browser_action/page_action&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;插件的popup窗口&lt;/li&gt;
&lt;li&gt;browser_action针对所有页面，page_action针对指定页面&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;background&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;插件的js运行环境&lt;/li&gt;
&lt;li&gt;消息传递机制和其它页面通信 sendMessage/onMessage&lt;/li&gt;
&lt;li&gt;无限制跨域&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;content_scripts&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在当前页面运行的js文件，负责操作页面DOM&lt;/li&gt;
&lt;li&gt;和当前页面js处于不同上下文&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;chrome-extension-01&#34; src=&#34;https://rudyarchitect.github.io/blog-images/frontend/frontend_chrome-extension-01.jpg&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;长链接&#34;&gt;长链接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;background和popup&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可以直接互相调用，不用消息传递&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;background和content&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;postMessage+connect&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>不可不知的股票分析策略</title>
      <link>https://rudy.org.cn/2019/finance_stock-analysis/</link>
      <pubDate>Tue, 22 Oct 2019 21:58:57 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/finance_stock-analysis/</guid>
      <description>

&lt;h2 id=&#34;市盈率pe&#34;&gt;市盈率PE&lt;/h2&gt;

&lt;h2 id=&#34;市净率pb&#34;&gt;市净率PB&lt;/h2&gt;

&lt;h2 id=&#34;欧奈尔基本面-技术分析&#34;&gt;欧奈尔基本面+技术分析&lt;/h2&gt;

&lt;p&gt;欧奈尔将强势股票在上涨初期表现出来的7种特征总结为CANSLIM,其中每一个字母代表一种特征。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字母&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;可加速增长的每股收益率&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;靠前的年度收益增长率&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;新公司，新产品，新管理层，股价新高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;股票需求大于供给&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;股票在行业中的龙头地位&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;机构认同度高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;市场走牛&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>缠论笔记</title>
      <link>https://rudy.org.cn/2019/finance_stock-chanlun/</link>
      <pubDate>Tue, 22 Oct 2019 21:47:27 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/finance_stock-chanlun/</guid>
      <description>

&lt;h2 id=&#34;2个认知&#34;&gt;2个认知&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;风险承受力&lt;/li&gt;
&lt;li&gt;愿意持有时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;要点&#34;&gt;要点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;K线图高低点连线&lt;/li&gt;
&lt;li&gt;完全分类后的操作&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;分型

&lt;ul&gt;
&lt;li&gt;至少3根K线组成，分为顶和底&lt;/li&gt;
&lt;li&gt;K线可能存在包含关系&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;笔

&lt;ul&gt;
&lt;li&gt;至少7根K线组成，即顶+至少一根K线+底&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;线段

&lt;ul&gt;
&lt;li&gt;由3笔构成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;心态放松-重视操作的过程-而不仅仅是关注结果&#34;&gt;心态放松，重视操作的过程，而不仅仅是关注结果。&lt;/h2&gt;

&lt;h2 id=&#34;找到生活中的7只股票&#34;&gt;找到生活中的7只股票。&lt;/h2&gt;

&lt;h2 id=&#34;笔记&#34;&gt;笔记&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;没有人能够战胜市场，e.g. 格雷厄姆和费雪。&lt;/li&gt;
&lt;li&gt;找行业的龙头企业或自己熟悉的优秀企业。&lt;/li&gt;
&lt;li&gt;专注不多于5只股票的操作。&lt;/li&gt;
&lt;li&gt;笔必须被笔破坏，线段必须被线段破坏，这样才能保证它的结构稳定，不会被轻易破坏。&lt;/li&gt;
&lt;li&gt;中枢分为笔中枢和线段中枢。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;chanlun-01&#34; src=&#34;https://rudyarchitect.github.io/blog-images/finance/finance_chanlun-01.jpeg&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端架构师的时间管理原则</title>
      <link>https://rudy.org.cn/2019/manage_rules/</link>
      <pubDate>Mon, 21 Oct 2019 10:38:16 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/manage_rules/</guid>
      <description>

&lt;h2 id=&#34;前端架构师&#34;&gt;前端架构师&lt;/h2&gt;

&lt;p&gt;前端架构是一系列工具和流程的集合，旨在提升前端代码质量，并实现高效、可持续的工作流。&lt;/p&gt;

&lt;h3 id=&#34;4个核心&#34;&gt;4个核心&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;代码——如何实现系统架构中的HTML、CSS和JavaScript&lt;/li&gt;
&lt;li&gt;流程——构建高效并且防止出错的工作流所需要的工具和流程&lt;/li&gt;
&lt;li&gt;测试——为网站搭建稳固基础&lt;/li&gt;
&lt;li&gt;文档——规划好系统设计蓝图&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;职责&#34;&gt;职责&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;体系设计——清晰描绘产品和代码的最终形态&lt;/li&gt;
&lt;li&gt;工作规划——制定完整开发工作流&lt;/li&gt;
&lt;li&gt;监督跟进——保证项目高效率完成&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;时间管理原则&#34;&gt;时间管理原则：&lt;/h2&gt;

&lt;p&gt;1.细微边界&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;细微边界是指时间上的细微差别可能导致最终结果上的巨大差异，即所谓“差之毫厘，失之千里”。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.帕累托&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;帕累托又称80/20，是指在任何系统中，约80%的结果是由该系统中约20%的变量产生的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.帕金森&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;帕金森认为，工作在最终期限到来之前是不可能被完成的。这一原则实际上是依赖人与生俱来的惰性和对最后期限的潜意识。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>有关人生的歌词</title>
      <link>https://rudy.org.cn/2019/life_lyrics/</link>
      <pubDate>Thu, 17 Oct 2019 15:56:21 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/life_lyrics/</guid>
      <description>

&lt;h2 id=&#34;海阔天空&#34;&gt;海阔天空&lt;/h2&gt;

&lt;p&gt;一生要走多远的路程&lt;/p&gt;

&lt;p&gt;经过多少年&lt;/p&gt;

&lt;p&gt;才能走到终点&lt;/p&gt;

&lt;p&gt;梦想需要多久的时间&lt;/p&gt;

&lt;p&gt;多少血和泪&lt;/p&gt;

&lt;p&gt;才能慢慢实现&lt;/p&gt;

&lt;p&gt;天地间任我展翅高飞&lt;/p&gt;

&lt;p&gt;谁说那是天真的预言&lt;/p&gt;

&lt;p&gt;风中挥舞狂乱的双手&lt;/p&gt;

&lt;p&gt;写下灿烂的诗篇&lt;/p&gt;

&lt;p&gt;不管有多么疲倦&lt;/p&gt;

&lt;p&gt;潮来潮往世界多变迁&lt;/p&gt;

&lt;p&gt;迎接光辉岁月&lt;/p&gt;

&lt;p&gt;为它一生奉献&lt;/p&gt;

&lt;h2 id=&#34;blowing-in-the-wind-答案在风中飘&#34;&gt;Blowing in the Wind 答案在风中飘&lt;/h2&gt;

&lt;p&gt;How many roads must a man walk down&lt;/p&gt;

&lt;p&gt;一个男人还要经历多少的干戈与磨难&lt;/p&gt;

&lt;p&gt;Before they call him a man&lt;/p&gt;

&lt;p&gt;才能被称为真正的男子汉&lt;/p&gt;

&lt;p&gt;How many seas must a white dove sail&lt;/p&gt;

&lt;p&gt;一只和平鸽还要飞越几重巨浪汪洋&lt;/p&gt;

&lt;p&gt;Before she sleeps in the sand&lt;/p&gt;

&lt;p&gt;才能安眠于宁静海滩&lt;/p&gt;

&lt;p&gt;How many years must a mountain exist&lt;/p&gt;

&lt;p&gt;一座高山还要守望多少无情岁月&lt;/p&gt;

&lt;p&gt;Before it is washed to the sea&lt;/p&gt;

&lt;p&gt;才能见证沧海桑田&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端计划 2020</title>
      <link>https://rudy.org.cn/2019/frontend_plan-2020/</link>
      <pubDate>Wed, 16 Oct 2019 16:46:51 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/frontend_plan-2020/</guid>
      <description>

&lt;h2 id=&#34;公司前端架构&#34;&gt;公司前端架构&lt;/h2&gt;

&lt;p&gt;1.项目&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;web编辑器&lt;/li&gt;
&lt;li&gt;监控平台&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.工具&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;规范&lt;/li&gt;
&lt;li&gt;脚手架&lt;/li&gt;
&lt;li&gt;mock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.方向&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前端服务化&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;个人&#34;&gt;个人&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;职级P7/P8&lt;/li&gt;
&lt;li&gt;软件架构师 2020.11&lt;/li&gt;
&lt;li&gt;写1本前端架构方面的书。 2020.07&lt;/li&gt;
&lt;li&gt;写1本金融大数据管理方面的书，搭建以云计算技术为基础，基于大数据和深度学习的人工智能平台。&lt;/li&gt;
&lt;li&gt;BEC 2020.11&lt;/li&gt;
&lt;li&gt;CFA 3年备考 2020-2023&lt;/li&gt;
&lt;li&gt;AQF 2020.09考试改革&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>听任大大的话</title>
      <link>https://rudy.org.cn/2019/life_rendada/</link>
      <pubDate>Wed, 16 Oct 2019 09:11:03 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/life_rendada/</guid>
      <description>

&lt;h2 id=&#34;任大大&#34;&gt;任大大&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;我不是从小构建了什么做大事的想法，只是孜孜不倦地对一件事情研究，对一件事情的理解太集中了就容易产生成功。贫穷没有使我获得什么必须成功的要素。&lt;/li&gt;
&lt;li&gt;那时的痛苦，还包括身份证明的痛苦，因为我们是私营企业，那时没有政治地位，还赚钱，是受怀疑的。今天的痛苦，是美国打击华为的市场、商业，但打击不了我们的生命。&lt;/li&gt;
&lt;li&gt;痛苦并没有什么收获。如果我们“东一榔头，西一棒子”，注定是失败的，应该坚定不移在一个正确方向上去努力，才有可能成功，后来我们把奋斗目标叫做“方向大致正确”，绝对正确的方向不存在，大致正确就可以了。第二，组织要充满活力，对准一个地方。这是在科学技术上押注上押赌，有可能赌错。幸亏赌对了，压力就释放了。后来就不想自杀了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;我的体会&#34;&gt;我的体会：&lt;/h2&gt;

&lt;p&gt;今年任大大的采访特别多，如果不是华为遇到了危机，可能很难有这样的机会了解他的思想，华为表现出的生命力是令人震撼的，人生要有目标，就像电影《银河补习班》里说的，&amp;rdquo;人生就像射箭，梦想就像箭靶子，连箭靶子都找不到在哪，你每天拉弓有什么用。&amp;rdquo;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要学习的不仅是知识，还有思想，还有方法。&lt;/li&gt;
&lt;li&gt;永远不要停止思考，永远不认输。&lt;/li&gt;
&lt;li&gt;清华北大只是过程，不是目的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&#34;rendada-01&#34; src=&#34;https://rudyarchitect.github.io/blog-images/life/life_rendada-01.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>大数据学习笔记</title>
      <link>https://rudy.org.cn/2019/backend_bigdata-note/</link>
      <pubDate>Tue, 15 Oct 2019 11:19:24 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/backend_bigdata-note/</guid>
      <description>&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>编辑器方案设计</title>
      <link>https://rudy.org.cn/2019/frontend_editor-design/</link>
      <pubDate>Mon, 14 Oct 2019 19:18:13 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/frontend_editor-design/</guid>
      <description>&lt;p&gt;页面 = HTML Tree (DOM) + 静态Data + 动态逻辑Javascript&lt;/p&gt;

&lt;p&gt;页面可视化编辑本质上是用可视化的方式对页面的DOM、静态Data和动态逻辑javascript进行操作，从而完成页面的生成。&lt;/p&gt;

&lt;p&gt;前端服务化，为前端小白，运营/产品人员,以及后台开发人员提供开发前端页面的能力。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;系统粒度

&lt;ul&gt;
&lt;li&gt;HTML Tree编辑&lt;/li&gt;
&lt;li&gt;Component Tree编辑&lt;/li&gt;
&lt;li&gt;静态Data编辑&lt;/li&gt;
&lt;li&gt;动态逻辑Javascript编辑&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;面向群体

&lt;ul&gt;
&lt;li&gt;前端小白&lt;/li&gt;
&lt;li&gt;运营/产品人员&lt;/li&gt;
&lt;li&gt;后台开发人员&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;编辑自由度

&lt;ul&gt;
&lt;li&gt;页面&lt;/li&gt;
&lt;li&gt;组件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;核心原理：模板 + 配置数据 = 页面&lt;/p&gt;

&lt;p&gt;最佳实践&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据格式Json Scheme&lt;/li&gt;
&lt;li&gt;组件化和模板化&lt;/li&gt;
&lt;li&gt;编辑与组件、模板和框架解耦&lt;/li&gt;
&lt;li&gt;框架负责数据管理

&lt;ul&gt;
&lt;li&gt;数据包括组件数据和业务数据，管理包括保存数据和读取数据方式。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;分析数据管理的简单场景和复杂场景，确定边界&lt;/li&gt;
&lt;li&gt;组件暴露所有属性和事件&lt;/li&gt;
&lt;li&gt;渐进式体验&lt;/li&gt;
&lt;li&gt;数据驱动

&lt;ul&gt;
&lt;li&gt;数据现在是什么样子&lt;/li&gt;
&lt;li&gt;数据在哪里被修改了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端规范方案设计</title>
      <link>https://rudy.org.cn/2019/frontend_standard-design/</link>
      <pubDate>Mon, 14 Oct 2019 17:39:21 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/frontend_standard-design/</guid>
      <description>&lt;p&gt;1.项目组织结构&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;目录结构&lt;/li&gt;
&lt;li&gt;配置文件&lt;/li&gt;
&lt;li&gt;README&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.代码规范&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;命名规范&lt;/li&gt;
&lt;li&gt;Html规范&lt;/li&gt;
&lt;li&gt;Javascript规范&lt;/li&gt;
&lt;li&gt;CSS规范&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.统一代码风格&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;利用Lint工具，配置语法检测规则来对代码风格进行检测。&lt;/li&gt;
&lt;li&gt;e.g.  js lint, css lint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.开发工具规范&lt;/p&gt;

&lt;p&gt;4.1 编辑器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;li&gt;Web Storm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.2 统一插件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EditorConfig&lt;/li&gt;
&lt;li&gt;Lint&lt;/li&gt;
&lt;li&gt;单词拼写检查&lt;/li&gt;
&lt;li&gt;路径补全&lt;/li&gt;
&lt;li&gt;代码自动补全&lt;/li&gt;
&lt;li&gt;Emmet&lt;/li&gt;
&lt;li&gt;代码格式化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.3 README搭建指南&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;运行环境&lt;/li&gt;
&lt;li&gt;依赖项&lt;/li&gt;
&lt;li&gt;项目安装指南&lt;/li&gt;
&lt;li&gt;项目结构图&lt;/li&gt;
&lt;li&gt;参考资料&lt;/li&gt;
&lt;li&gt;维护人员联系方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.代码提交信息规范&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[任务名称/编码] [类型] 提交人 : 详细信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类型说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文档&lt;/li&gt;
&lt;li&gt;功能&lt;/li&gt;
&lt;li&gt;修复&lt;/li&gt;
&lt;li&gt;重构&lt;/li&gt;
&lt;li&gt;样式&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6.流程化&lt;/p&gt;

&lt;p&gt;6.1 代码预处理
- Lint + Git Hooks
- Lint + Webhook&lt;/p&gt;

&lt;p&gt;6.2 人工检查代码
- Code Review
- Pull Request&lt;/p&gt;

&lt;p&gt;7.工具&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代码扫描工具 Sonar&lt;/li&gt;
&lt;li&gt;测试方案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端监控平台analysis方案设计</title>
      <link>https://rudy.org.cn/2019/frontend_analysis-design/</link>
      <pubDate>Mon, 14 Oct 2019 17:33:53 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/frontend_analysis-design/</guid>
      <description>

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;为了定位Web线上问题，需要对页面异常信息进行收集，分析和定位问题原因，以提升用户体验和产品运营效率。&lt;/p&gt;

&lt;h2 id=&#34;维度&#34;&gt;维度&lt;/h2&gt;

&lt;p&gt;前端监控的维度主要分为以下3个方面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;异常&lt;/li&gt;
&lt;li&gt;用户行为&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;监听window对象的onerror事件。&lt;/li&gt;
&lt;li&gt;使用try catch语句。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;案例&#34;&gt;案例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[开源] 腾讯 &lt;a href=&#34;https://betterjs.github.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;badjs&lt;/a&gt;
文档说明详细，提供完整解决方案，项目落地10+。

&lt;ul&gt;
&lt;li&gt;日志功能&lt;/li&gt;
&lt;li&gt;上报功能&lt;/li&gt;
&lt;li&gt;统计功能&lt;/li&gt;
&lt;li&gt;邮件功能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[收费] &lt;a href=&#34;https://sentry.io&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;sentry&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;代码开源&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sentry.io/pricing/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;价格&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[收费] &lt;a href=&#34;https://www.fundebug.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;fundebug&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fundebug.com/price&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;价格&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[收费] 阿里云ARMS-&lt;a href=&#34;https://help.aliyun.com/document_detail/58652.html?spm=5176.8064714.976547.2.251cIEc0IEc0Ro&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;前端监控&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;主动监控&lt;/li&gt;
&lt;li&gt;慢会话追踪&lt;/li&gt;
&lt;li&gt;搜索报错明细&lt;/li&gt;
&lt;li&gt;出错行为还原&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[收费] 蒲公英 &lt;a href=&#34;https://www.frontjs.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;frontjs&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.frontjs.com/pricing&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;价格&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[无维护] 淘宝 &lt;a href=&#34;https://github.com/CurtisCBS/monitor&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;JSTracker&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;参考README&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[未开源] 阿里 FdSafe&lt;/li&gt;
&lt;li&gt;[无维护] 支付宝 &lt;a href=&#34;https://github.com/saijs/sai.js&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;saijs&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/saijs/wiki&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;javascript异常文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;需求分析&#34;&gt;需求分析&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;错误收集&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;错误信息&lt;/li&gt;
&lt;li&gt;资源加载错误&lt;/li&gt;
&lt;li&gt;运行时错误&lt;/li&gt;
&lt;li&gt;性能指标&lt;/li&gt;
&lt;li&gt;页面加载时长&lt;/li&gt;
&lt;li&gt;首次渲染时长&lt;/li&gt;
&lt;li&gt;首次内容渲染时长&lt;/li&gt;
&lt;li&gt;首次有效渲染时长&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;日志数据
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上报策略&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ajax&lt;/li&gt;
&lt;li&gt;跨域 CORS协议&lt;/li&gt;
&lt;li&gt;image对象
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;日志采集与存储&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据过滤&lt;/li&gt;
&lt;li&gt;节流&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;告警功能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最大最小值&lt;/li&gt;
&lt;li&gt;错误累计数&lt;/li&gt;
&lt;li&gt;异常等级&lt;/li&gt;
&lt;li&gt;自定义&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;邮件短信通知&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;错误定位与复现&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;管理后台数据可视化&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端架构从0到1</title>
      <link>https://rudy.org.cn/2019/book_frontend-outline/</link>
      <pubDate>Wed, 09 Oct 2019 19:27:35 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/book_frontend-outline/</guid>
      <description>

&lt;h2 id=&#34;自序-技术的世界没有银弹&#34;&gt;自序 技术的世界没有银弹&lt;/h2&gt;

&lt;p&gt;为什么要参与写这本书？在大多数情况下，内心是惶恐的，从学校毕业后一直做前端这个方向已经5年了，在此期间经历了Web技术变革的浪潮，想想总有一些可以总结的东西，可以给后来的同学一些建议和参考。前端工程师这个岗位的发展历史很短，在我的认知也是近十年内的事情，一开始Web页面在技术架构中只是很小的一部分，更多的是处理一些数据的展示或者提交的简单业务，所以无需一个专门的岗位负责。就连XX也承认，一开始Javascript的设计就和Java区别很大，它并不是为复杂业务诞生的一门强类型语言，而只是一个弱类型的脚本语言，只是为了方便支持Web页面的交互操作，真的仅此而已。&lt;/p&gt;

&lt;p&gt;这是一个做前端最好的时代，也是一个做前端最坏的时代，当然这条规则也适应其它任何技术。科技创新是世界发展的第一生产力，随着互联网技术的发展，这5年前端同样发生了剧烈的变革，jQuery用了10年左右的时间才建立的前端地位不断受到挑战，从Angular，React到Vue，从MVC，MVVM到组件化，前端再也不是一个数据展示或者表单提交就可以搞定的事情，而是有可能支撑更复杂的业务。从具体表现上看，技术团队成员中前后端技术成员的比例越来越趋近1，业务需求上也出现了前后端分工，从而更好地支撑业务需求从后端实现转向前端实现的技术发展方向。为什么要这么做？笔者认为深层次的原因在于移动互联时代，用户对Web端的体验要求越来越高，而对操作的延时忍耐度越来越低，如果将所有的业务实现由后端实现，可想而知所要付出的网络资源消耗的代价有多么的恐怖，这种技术架构已无法支撑现在的用户体验。&lt;/p&gt;

&lt;p&gt;从公司的层面来看，随着公司业务的不断扩张，如何统筹公司整个前端架构和流程的设计，从而更好地支持产品线的迭代将成为互联网公司是否存活的关键问题之一。这个观点可能有些个人色彩，但在时间管理领域早有定论，具体指的是细微边界原则。这个原则告诉我们，时间上的细微差别可能导致最终结果上的巨大差异，即所谓“差之毫厘，失之千里”。互联网竞争激烈的程度不用在此做过多的解释，很多时候一个产品迭代的速度决定了它的生命周期，例如米聊和微信的故事，这个世界没有如果，技术世界也没有银弹，我们能做的是更好的适应这个技术快速变革的时代。笔者偶然间看到一则故事，深受启发，故事中的老师告诉学生，只有将80%的时间花在对基础的学习和认知中，才能更好地掌握新的技术。&lt;/p&gt;

&lt;p&gt;在这本书中，笔者更想和大家分享的是对前端框架底层实现的一些分享，以及如何去设计一个公司级的前端流程，并且如何搭建一个监控平台支持产品线上错误定位和通知等。对于CSS这块，我会单独抽出一章来进行说明，这块也是很多同学容易忽略的部分，当然也包括笔者。在具体的章节中，笔者将会更多的偏向基础原理的分析，并会给出具体的demo，便于读者的理解和掌握。&lt;/p&gt;

&lt;p&gt;最后，这本书的出生要感谢身边的每一个人，特别是我的爱人和小宝，很抱歉因为写书的原因而不能更多的陪伴你们，时光是最无情的刻刀，希望你们开心并快乐着。&lt;/p&gt;

&lt;p&gt;Rudy&lt;/p&gt;

&lt;p&gt;2019年11月于成都&lt;/p&gt;

&lt;h2 id=&#34;前端框架分析及趋势&#34;&gt;前端框架分析及趋势&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;前端框架发展简介 5页&lt;/li&gt;
&lt;li&gt;Angular从1到2 10页&lt;/li&gt;
&lt;li&gt;React持续成长 10页&lt;/li&gt;
&lt;li&gt;后起之秀Vue 10页&lt;/li&gt;
&lt;li&gt;框架未来简史 5页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;预估40页&lt;/p&gt;

&lt;h2 id=&#34;前端流程设计&#34;&gt;前端流程设计&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;脚手架DIY 15页&lt;/li&gt;
&lt;li&gt;规范统一习惯 15页&lt;/li&gt;
&lt;li&gt;代码管理的艺术 10页&lt;/li&gt;
&lt;li&gt;测试不可或缺 10页&lt;/li&gt;

&lt;li&gt;&lt;p&gt;无文档不开心 10页&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;预估60页&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;css那些不得不说的事&#34;&gt;CSS那些不得不说的事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;寻找CSS设计的圣杯 10页&lt;/li&gt;
&lt;li&gt;预处理实现自动适配 10页&lt;/li&gt;
&lt;li&gt;可行的CSS方案 10页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;预估30页&lt;/p&gt;

&lt;h2 id=&#34;前端监控设计与落地&#34;&gt;前端监控设计与落地&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;监控的一小步 5页&lt;/li&gt;
&lt;li&gt;监控可视化 10页&lt;/li&gt;
&lt;li&gt;监控设计与实践 15页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;预估30页&lt;/p&gt;

&lt;h2 id=&#34;前端新技术展望与实践&#34;&gt;前端新技术展望与实践&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;webassembly&lt;/li&gt;
&lt;li&gt;pwa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>机器学习笔记</title>
      <link>https://rudy.org.cn/2019/bigdata_machine-study-note/</link>
      <pubDate>Wed, 09 Oct 2019 19:17:50 +0800</pubDate>
      
      <guid>https://rudy.org.cn/2019/bigdata_machine-study-note/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;人工智能是一种工具，借助于它更高效地解决海量数据分析和决策问题。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;思维方式的改变，依赖更多的不是人的经验，而是通过数据分析来做出更理智的决策。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;应用场景&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;财务需要懂得如何使用Python和数据分析工具更高效地工作&lt;/li&gt;
&lt;li&gt;运营懂得如何分析数据来做精准化营销&lt;/li&gt;
&lt;li&gt;销售懂得如何通过构造用户画像去提升转化率和业绩&lt;/li&gt;
&lt;li&gt;产品经理懂得如果通过数据分析来调整产品策略&lt;/li&gt;
&lt;li&gt;人力懂得如何通过数据来精准筛选简历和人才&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;  ·End·  &lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>