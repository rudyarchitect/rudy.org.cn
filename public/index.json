[
{
	"uri": "http://rudy.org.cn/",
	"title": "",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/categories/",
	"title": "Categories",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/tags/mvvm/",
	"title": "mvvm",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/",
	"title": "Posts",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/tags/",
	"title": "Tags",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/categories/%E5%89%8D%E7%AB%AF/",
	"title": "前端",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_javascript-mvvm-realize/",
	"title": "手写数据绑定mvvm实现",
	"tags": ["mvvm"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " mvc与mvvm 1.mvc\n model 模型层 view 视图层 controller 控制层  2.mvvm\n model 模型层 view 视图层 view model 视图模型层  view dom 监听 model 数据绑定   基础知识 Object.defineProperty  参数  obj 对象 prop 新属性或修改属性 descriptor 属性描述符  configurable enumerable value wirtable get set    在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回该对象。\nconst Test = function(){ let item, arr = [] Object.defineProperty(this, 'item',{ get:() =\u0026gt;{ console.log('get item of value') return item }, set:(value)=\u0026gt;{ item = value arr.push(item) } }) this.getTest = ()=\u0026gt; arr } const a = new Test() a.item a.item = 1 a.item = 2 a.getTest() //['1','2']  设计模式 观察者模式又称为发布-订阅模式或者消息机制，它定义了一种依赖关系，解决被观察对象和观察者之间的耦合。\nconst Observer = (function(){ //消息容器 let _messages = {} return { //监听 listen:function(type,fn){ //如果消息类型不存在，则创建一个消息类型 if(typeof _messages[type] === 'undefined'){ //创建消息执行队列 _messages[type] = [fn] }else{ _messages[type].push(fn) } }, //发布 publish:function(type,args){ //消息执行队列不存在，返回 if(!_messages[type]){ return } //定义信息 let events = { type:type, args:args || {} }, i=0, len = _messages[type].length //遍历消息执行队列 for(;i\u0026lt;len;i++){ _messages[type][i].call(this,events); } }, //移除 remove:function(type,fn){ //如果消息执行队列存在 if(_message[type] instanceof Array){ //从最后一个元素开始遍历 let i = _messages[type].length - 1 for(;i\u0026gt;=0;i--){ // 如果函数存在，则移除 _messages[type][i] === fn \u0026amp;\u0026amp; _messages[type].splice(i,1) } } } } })() Observer.listen('test',function(e){ console.log(e) }) Observer.publish('test',{msg:'消息’}) //{type:'test',args:{msg:‘消息’}}  数据绑定实现 数据劫持 vue.js 脏值检查 angular.js \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/bind/",
	"title": "bind",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_javascript_bind/",
	"title": "js中的bind方法",
	"tags": ["bind"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " bind  特点 mdn的polyfill 词法作用域 执行顺序  执行上下文栈  变量对象 vo/ao  全局上下文 函数上下文  执行过程  进入执行上下文 代码执行  作用域链  函数激活  this 具体执行分析 闭包 call和apply的模拟实现 new 柯里化 继承 原型链  \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/design-pattern/",
	"title": "design pattern",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_design-pattern/",
	"title": "javascript设计模式",
	"tags": ["design pattern"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 设计模式 编写高效，可维护代码，提升工作效率\n oop基础 封装程序和数据 创建型 控制对象的创建  简单工厂 工厂方法 抽象工厂 建造者 原型 单例  结构型 将类或对象组合成更大更复杂结构  外观 适配器 代理 装饰器 桥接 组合 享元  行为型 用于不同对象之间的职责划分或算法抽象  模板方法 观察者 状态 策略 职责链 命令 访问者 中介者 备忘录 迭代器 解释器  技巧型 解决组件相关问题  链 委托 数据访问对象 节流 简单模板 惰性 参与者 等待者  架构型 提供子系统，指定职责，组织在一起  同步模块 异步模块 widget mvc mvp mvvm     ·End· \n"
},
{
	"uri": "http://rudy.org.cn/categories/%E5%9F%BA%E7%A1%80/",
	"title": "基础",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/tags/system/",
	"title": "system",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_knowledge-system/",
	"title": "前端知识体系",
	"tags": ["system"],
	"categories": [],
	"series": [],
	"description": "",
	"content": "\n es5 知识点  原始类型 //值 boolean undefined null number string symbol ? 对象类型 object //内存地址（指针）\u0026lt;\u0026ndash;\u0026gt; 值 typeof null // \u0026lsquo;object\u0026rsquo; is bug 0.1+0.2=0.30000000000000004 // number 浮点类型 typeof 判断原始类型 instanceof 判断对象类型 类型转换 this指向 函数直接调用 指向window 对象 谁调用指向谁 new 指向实例 bind/箭头函数 多次调用，this指向取决于第一次调用上下文 == vs === //==涉及类型转换 闭包 存在的意义就是可以访问外部函数的变量 对象拷贝 浅拷贝 object.assign() / 展开运算符 \u0026hellip; //拷贝属性值，属性中有对象的话，拷贝的是地址 深拷贝 lodash.cloneDeep() //自己实现一个 原型 //重点 Object Function proto 函数提升优先于变量提升  es6知识点  let,const 暂时性死区 继承 原型 class 模块化 commonjs 服务器端/同步/值拷贝 es module 浏览器端/异步/地址拷贝 proxy 数据响应式 map,filter,reduce  js进阶  回调函数 callback generator promise 实现 async/await requestAnimationFrame call , apply , bind , new 实现 垃圾回收机制  event loop  执行栈 call stack 先进后出 同步执行的js代码 任务队列 task queue 异步执行的js代码 宏任务 macro task //setTimeout , setInterval , xhr \u0026hellip; 微任务 micro task // promise , mutation observer \u0026hellip; 浏览器 node  浏览器  事件机制 注册 触发 代理 跨域 同源策略 解决方案  jsonp cors document.domain postMessage  存储 cookie localStorage sessionStorage service worker 缓存机制 缓存位置 强缓存 协商缓存 渲染原理 从url到页面渲染的整个流程  安全  xss csrf  性能优化  chrome audits  性能分析报告  performance  分析性能瓶颈 每个阶段耗费时间  v8 js解释性语言首先会被解析成抽象语法树（AST），然后通过解释器转换成字节码（很多逻辑判断），或者通过编译器转换成机器码。  优化策略 减少代码文件大小 减少嵌套函数 传入参数类型保持一致，会直接编译成机器码  js 图片优化  减少像素点和每个像素点能够显示的颜色 css代替 雪碧图 base64格式  节流 在一段时间内只发生一次事件 防抖 在一段事件内只执行最后一次事件 预加载 预渲染 懒计算 懒加载 cdn webpack //自己实现一个 减少打包时间  优化loader happypack 将loader同步执行转换成并行  减少包大小  按需加载 tree shaking   js框架  基础 mvvm virtual dom 路由 react vue angular  监控  行为 性能 异常  http  请求方法 首部 通用 请求 响应 实体 状态码 tsl 加密  对称 非对称  3次握手  udp tcp  http2  css 编译  jit编译，动态编译，在浏览器中进行代码编译 aot编译，静态编译，在项目工程打包阶段编译    ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/life/",
	"title": "life",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/categories/%E4%BA%BA%E7%94%9F/",
	"title": "人生",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/life/life_dinglei/",
	"title": "保持终身学习的丁磊",
	"tags": ["life"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 丁磊 我对奉化有非常多美好的回忆。1971年，我在奉化读书时，奉化总共有三个小学、两个中学。我在11年的读书生涯里，把这五个学校全读遍了。\n“读书”给我留下什么印象呢？其实很痛苦，极为痛苦。\n考到奉化中学以后，我其实成绩并不好。那时候我们班上有54个同学，我是全班倒数第六名。印象最深刻的是我的班主任，把我们最后倒数六名同学拉到教室门外骂一顿，他说：你们拖了我们班的后腿，这个印象很深刻。\n我想跟大家分享，我们班上比我学习优秀的人非常多，不止一个，是几十个这样的规模。像我们班上前十名的同学，后面我们也有联络，但好像他们在事业上都不是那么如意。我就在想，为什么这些人到了社会上跟我有很大的不一样？他们的学习比我好，应该说能力比我强，为什么有这种差异存在呢？\n我觉得其中有一条，我是从小有兴趣的人。我非常感激我的爸爸，他是一个热爱电子的工程师。我爸爸在我6岁的时候就开始逼我每个月和他一起阅读杂志。那时候家里一共三本杂志，一个是《大众科学》、一个是《无线电》、一个是《科学画报》。每次看杂志，我爸爸就跟我分享说，世界有哪些技术正在影响和改变整个人类社会。\n这种兴趣、这种求知欲，后来我终身保持着。到现在，我每天晚上一有空会抽出时间来看三本杂志的摘要，一个是《Nature》自然杂志，一个是《CELL》细胞杂志，一个是《Science》科学杂志，然后去理解这个世界上那些创新的东西对今天的改变。\n因为有这样一个兴趣，我在奉化中学的时候，也会在读书之余，在学校的苹果电脑上用Basic语言写游戏程序。总体而说，我是一个比较不务正业的人，喜欢为自己的兴趣投资很多的时间和精力。\n这个世界上很多真正成功的人，都是兴趣驱使的。我曾经在一本杂志上看到过罗大佑的故事，大家知道罗大佑是音乐人、是歌手、是个词曲作家，但他原本是个放射科的医生。那时，我深刻体会到了爱因斯坦的那句话——兴趣是最好的老师。\n另一点，今天很多同学都会面临一个问题，偏科是不是一件好事情？我自己很长一段时间也在思考今天的教育，因为我自己有一个比较痛苦的读书经历，我更希望我的孩子能够读得轻松一点、开心一点。其实东西方教育有一个差异，中国很多课程设计，他们都希望你能够全面发展。而在国外，更希望你在某一个方面出类拔萃。我在读高中的时候，数理化基本是全班前三，但是语文一直不好，英语马马虎虎，所以并不一个很全面发展的人。但因为对数理化有无限热爱，一直收益。\n所以，我个人也希望大家改变对偏科的看法。像现在学校里的考试都设置了满分，很多人读书的目的，就是在补差距，比如数学120分满分，你考97分，那就要想方设法地为这23分差距努力。我个人建议，如果你是真的很喜欢物理、化学，那么请你更多地投入在这门功课上，一路攻克，一直往前走。\n在学习过程中，我还想分享一样东西，就是学习方法。我曾经生物考得很差，经常班上倒数。那时候，我妈一个朋友的小孩经常考班上第一名、第二名，我妈妈跟我说：要不要找一个时间跟他聊聊，看看他读书有什么秘诀。很幸运的是，这个同学给了我一生中难以忘怀的启发。他教我的一套方法就是，对于任何知识的理解都要有一套逻辑，逻辑是最主要的。没有逻辑，光死记硬背是非常难掌握的。\n逻辑开启了我的学习之路以后，我觉得，在我们学习里面还有一个很重要的秘诀跟大家分享，就是要脸皮厚。\n我在读书的时候发现，成绩优秀的人，他不愿意问别人问题。但恰恰我是一个脸皮比较厚、成绩比较差的人，所以后来我在大学和工作当中，我会不停地向身边优秀的人去请教各种问题。“不耻下问”是老祖宗留下来的一句话，我非常欣赏。你在江湖上行走，有机会要多跟别人请教。\n所以，如果说，在今天，学习是一件终身需要努力的事情，那么在学习方法上，第一个是要有逻辑，第二个是要不耻下问，跟身边最优秀的人学习。还有一个就是，认准了方向之后永远不要放弃。我之前说过，我刚进奉化中学读书的时候，是倒数第六名，后来，我就靠每个学期不停地进步，不停地进步，最后有机会考上大学。如果没有中国的大学教育，今天我估计不会有这样的发展。\n除了在学校里面读书以外，我想和大家分享的是，即便离开了学校，你也要保持终身学习的热情。很多人说：人为什么要一辈子不停地学习？我想，学习可以让你更从容地理解这个时代，并且和这个时代相处。你不会落伍，你会和优秀的人永远在一起，齐头并进，来分享探索世界的乐趣。\n我创业20多年到今天，关于互联网的知识都是自己学习的。我记得，当初为了借三本PCPIP的书，我要坐4个小时的火车，从宁波跑到杭州，还得请人家吃饭，最后书借回来以后只能看一个礼拜。在那个礼拜里，我做了无数的笔记，因为那是我的兴趣，那是我的热爱。后来，我在互联网创业过程中，我也没学过管理，所以我去中国商学院读管理。每当遇到问题，我都会去看其他优秀的企业、其他优秀的老板会怎么解决这个问题。\n当你能保持终身学习的时候，你就不会落伍，你也不会心力憔悴。有句话说，这个时代会犒劳终身学习的人。有一位投资大师巴菲特，我有几个朋友请他吃过几顿饭，当然这顿饭很贵，几百万美金。吃饭的时候，肯定不是去谈这个饭好不好吃，大家都会带着问题去问他，去当面请教他，怎么看一个企业的价值？怎样有作为？这就是一个学习的过程。\n所以，在这个问题上，我想和大家分享，一个人不管贫穷和富裕，都应该学习认清这个世界，更新自我。如果说，有什么习惯是值得你坚持一辈子的，那就是终身学习，保持好奇心。如果你有好奇心的话，会促使你更主动地终身学习。\n今天，我们在学校学习所有的东西，都是有教材，都是有标准的，老师上课讲什么，考试考个好成绩，你排第几，大家一目了然。但是到了社会上，其实，市场上的竞争是没有公式的，也没有标准答案。如果你想要在未来的社会竞争里胜出的话，第一是要找到自己的兴趣，第二个，还要有终身学习的热情和追寻梦想的勇气。\n最后，我希望大家能够保持热爱，保持勇气，保持终身学习的态度和精神。在未来的路上，脚步不停，大放异彩。谢谢！\n我的感悟 回顾我这三十年的人生，也许高中是我人生的第一道坎，从高一入学时意气风发到高考的名落孙山，应该是我第一次体会到心理变化对一个孩子梦想的冲击，那时我的确迷失了，到现在阴影还有残余。坚固的堡垒从内部瓦解是最容易的，那时的我究竟发生了什么变化？我觉得我还是我，只是我丢掉了勇气和自信，更谈不上去寻找兴趣。\n现在我花了10年多的时间修复了这个心里创伤，我不去责怪任何人，很欣赏老贾的那一句“活着，梦想还能继续”，很庆幸我也找到了自己的兴趣，也很开心我还没有放弃对梦想的追求，也许人生的下半场才刚刚开始。\n 学习方法  要有逻辑 要不耻下问，向身边优秀的人学习 认准了方向之后永远不要放弃  保持终身学习的热情 不断试错，找到自己的兴趣 要有追求梦想的勇气  \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/keep-thinking/",
	"title": "keep thinking",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/life/life_jiayueting/",
	"title": "老贾的人生信条",
	"tags": ["keep thinking"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 贾跃亭 二十年来，作为从山西贫穷落后的小山村走出的创业者，我经历了很多次的成功和失败，尤其是从创立互联网生态模式到乐视生态的瞬间崩塌，让我从人生的巅峰跌落到全世界欠债最多的“老赖”，人生的大起大落莫过如此。 面对这样的至暗时刻，一些朋友包括债权人甚至担心我是最有可能自杀的人。\n面对创业路上的灾难、面对梦想的破灭，到底应该做出哪种选择？对我而言，答案是，活着，就能继续梦想。尽管曾走到悬崖边，\n但我坚信，活着是一种责任，活着就有百万种可能，活着你的故事就没有结束，就能还债、就能回国、就能把FF做成、就能实现梦想。\n我的感悟 老贾的这番话让人感动，活着，还能继续梦想，设想如果是我，还能这么想吗？估计很难，瑞·达利欧在《原则》中说过英雄总是会至少经历一次极大的失败（坎贝尔称之为“深渊”或“被鲸鱼吃进肚子”），这将考验他们有没有韧性东山再起，以更大的决心和更多的智慧继续战斗，普通人关注更多的是结果，对于过程的艰辛只有老贾自己知道。我自己常常也感慨，活着似乎挺难的，总有各种各种各样的烦恼，但似乎和老贾比起来，我的这些麻烦不值一提，那就继续努力，别放弃已在心中发芽的梦想种子，没有过程的历炼，会有成功么？\n\n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/manage/",
	"title": "manage",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/manage/manage_decuple-work-means/",
	"title": "《十倍工作法，寻找最佳实践》笔记",
	"tags": ["manage"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 以3个思考问题为核心的思考框架  Where are we?（我们现在在哪？） 现状 Where are we going?（我们要到哪儿去？）目标 How can we get there?（我们如何到达那里？）实现路径  整个工作法以4个思考原则展开讨论 以终为始，确定好真实目标  遇到事情倒着想，首先描述要做的事情，包括背景和意义，然后先写用户使用文档，最后再写代码。 DOD （Definition of Done，完成的定义）-做任何事情，先定义完成标准，可以固化到流程，是一种有效协作方式 检查项清单 梳理依赖，确定边界，用“用户故事”描述需求，定义验收标准（正常流程和异常流程） 交付物不是代码，是可工作的软件，如何做好集成？ 最小可行产品 MVP（Minimum Viable Product），默认所有的需求都不做，知道弄清楚为什么这么做。 《精益创业》  精益创业的方法论里，提出“开发（build）-测量（measure）-认知（learn）”这样一个反馈循环。就是说，当你有了一个新的想法（idea）时，就把想法开发成产品（code）投入市场，然后，收集数据（data）获取反馈，看看前面的想法是不是靠谱。  得到的结果无非是两种：好想法继续加强，不靠谱的想法丢掉算了。不管是哪种结果，你都会产生新的想法，再进入到下一个循环里。在这个反馈循环中，你所获得的认知是最重要的，因为它是经过验证的。在精益创业中，这也是一个很重要的概念：经过验证的认知（Validated Learning）。 扩大自己工作的上下文，在更高的维度思考问题。 不同角色工作真正的差异在于上下文的差异。在一个局部上下文难以解决的问题，换到另外一个上下文甚至是可以不解决的。所以说无论单点有多努力也只是局部优化，很难达到最优的效果。 想把工作做好，就需要不断扩大自己工作的上下文，多了解一下别人的工作逻辑是什么样的，认识软件开发的全生命周期。 在动手做一件事之前，先推演一番。 问一下自己，我的工作是不是可以用数字衡量。大数据时代，可视化的价值，定义好测量工作的有效性指标  迭代考虑项\n任务分解，找到实施路径  动手做一项工作之前，首先进行任务分解。 最佳实践称之为测试金字塔，它强调的重点是，越底层的测试应该写得越多。只有按照测试金字塔的方式写测试，持续集成才能更好地发挥作用。 多写单元测试。   TDD测试驱动开发已经是行业中的优秀实践，学习测试驱动开发的第一步是，记住测试驱动开发的节奏：红——绿——重构。把测试放在前面，还带来了视角的转变，要编写可测的代码。 将任务拆小，越小越好。 按照完整实现一个需求的顺序去安排分解出来的任务。 测试一定要写断言。 一段旅程（A-TRIP）  怎么样的测试算是好的测试呢？有人做了一个总结 A-TRIP，这是五个单词的缩写，分别是 Automatic，自动化； Thorough，全面的； Repeatable，可重复的； Independent，独立的； Professional，专业的。  绝大多数问题都是由于分解的粒度太大造成的，少有因为粒度太小而出问题的。 想要管理好需求，先把需求拆小。 评价用户故事有一个“ INVEST 原则”，这是六个单词的缩写，分别是：  Independent，独立的。一个用户故事应该完成一个独立的功能，尽可能不依赖于其它用户故事，因为彼此依赖的用户故事会让管理优先级、预估工作量都变得更加困难。如果真的有依赖，一种好的做法是，将依赖部分拆出来，重新调整。 Negotiable，可协商的。有事大家商量是一起工作的前提，我们无法保证所有的细节都能100%落实到用户故事里，这个时候最好的办法是大家商量。它也是满足其它评判标准的前提，就像前面提到的，一个用户故事不独立，需要分解，这也需要大家一起商量的。 Valuable，有价值的。一个用户故事都应该有其自身价值，这一项应该最容易理解，没有价值的事不做。但正如我们一直在说的那样，做任何一个事情之前，先问问价值所在。 Estimatable，可估算的。我们会利用用户故事估算的结果安排后续的工作计划。不能估算的用户故事，要么是因为有很多不确定的因素，要么是因为需求还是太大，这样的故事还没有到一个能开发的状态，还需要产品经理进一步分析。 Small，小。步子大了，不行。不能在一定时间内完成的用户故事只应该有一个结果，拆分。小的用户故事才方便调度，才好安排工作。 Testable，可测试的。不能测试谁知道你做得对不对。这个是我们在前面已经强调过的内容，也就是验收标准，你得知道怎样才算是工作完成。    按照时间管理的理念，重要且紧急的事情要立即做。重要但不紧急的事情应该是我们重点投入精力的地方。紧急但不重要的事情，可以委托别人做。不重要不紧急的事情，尽量少做。 需求分解之后，最重要的是，排列需求的优先级。 需求分解成一个个小块，其实也分解了原本合一的上下文。如果想要有效地管理需求，尤其是确定事情的重要程度，一种方式是找回丢失的上下文。如果我们自己无法判断上下文，一种好的办法是，引入外部更大的上下文。 我们要做的是验证一个想法的可行性，甚至不是为了开发一个软件，开发软件只是一种验证手段。 不是一个模块做得有多完整，而一条用户路径是否通畅。 做好产品开发，最可行的方式是采用 最小可行产品（Minimum Viable Product，MVP）。 最小可行产品就是“刚刚好”满足客户需求的产品。  沟通反馈，解决与人打交道出现的问题  通过沟通反馈，不断升级自己的编解码能力。 用业务的语言写代码。   站会。之所以采用站会的方式，就是要控制时间。在站会上每个人说什么，我给了你一个建议的格式：  我昨天做了什么？ 我今天打算做什么？ 我在过程中遇到了什么问题，需要请求帮助。  多面对面沟通，少开会。 人的大脑更擅长处理图像。 多尝试用可视化的方式进行沟通。 雷达图、流程图、UML 等。 看板。看板把工作分成了几个不同的阶段，在看板上对应不同的列，然后，每个任务作为一张卡贴在上面。每完成一张卡，就把这张卡挪到下一个阶段。   做好持续集成的关键在于，快速反馈。   定期复盘，找准问题根因，不断改善。 多走近用户，聆听用户声音，做对用户有价值的产品。 能用尽可能小的时间颗粒度来安排自己的工作。 在工作中要拓展自己的上下文，将自己放在更大的范围、平台上去思考问题，主动发掘问题关键点，在面对不同职能人员间沟通时，多运用“以终为始”模块中的知识尝试解决分歧，达成共识。 一旦有困难，尽早暴露问题，寻求帮助。 多输出，让知识更有结构。 金字塔原理。   持续集成的价值在于，它是一条主线，可以将诸多实践贯穿起来。 做好持续集成的关键是，快速反馈。   重构，本质上就是一个“微操作”的实践。你需要把做的代码调整分解成若干可以单独进行的“重构”小动作，然后，一步一步完成它。 函数式编程已然成为时代的主流。  自动化，解决与机器打交道出现的问题  学习自动化，先要知道哪些东西不要自动化，尽最大的努力不做浪费时间的事。一方面，我们要从需求上规避那些没必要做的事；另一方面，我们也从自身防止 NIH 综合症（Not Invented Here Syndrome），争取做一个懒惰的程序员。 NIH 是什么意思？就是有人特别看不上别人做的东西，非要自己做出一套来，原因只是因为那个东西不是我做的，可能存在各种问题。 不懂软件设计，只会被各种层出不穷的工具和框架淘汰。 将你的工作过程自动化。 有体系地学习运维知识。   DevOps 是将开发（Development）和运维（Operations）组合在了一起。   持续交付，是一种让软件随时处于可以部署到生产环境的能力。让软件具备部署到生产环境的能力，这里面有两个关键点：验证发布包和部署。 验证发布包，不仅是功能上的验证，还包括与环境结合在一起的验证。所以，通常会用几个不同的环境验证，每一个环境都是一个单独的阶段，一个阶段不通过，是不能进入下一阶段的，这种按照不同阶段组织构建的方式，称之为构建流水线（Build Pipeline）。 今天定义交付，不再是一个发布包，而是一个可以部署的镜像。 BDD（Behavior Driven Development）用业务的视角描述测试用例。 将验收测试自动化。 按照设计原则而不是设计模式重构代码，先有设计模式，再有设计模式。 Robert Martin 提出的面向对象设计原则：SOLID，这其实是五个设计原则的缩写，分别是  单一职责原则（Single responsibility principle，SRP） 开放封闭原则（Open–closed principle，OCP） Liskov 替换原则（Liskov substitution principle，LSP） 接口隔离原则（Interface segregation principle，ISP） 依赖倒置原则（Dependency inversion principle，DIP）  把函数写短。 人们擅长解决的是小问题，大问题怎么办？拆小了就好。 分层架构，实际上，就是一种在设计上的分解。 构建好你的领域模型（Domain Model），指的是服务层。领域模型中一个重要的组成部分：领域对象。领域对象中不应只包含数据访问，也就是常说的 getter 和 setter，还应该有业务逻辑。 你的领域层只依赖于你的领域对象，第三方发过来的内容先做一次转换，转换成你的领域对象。这种做法称为防腐层。   领域驱动设计（Domain Driven Design，DDD） 领域特定语言（Domain Specific Language，DSL） 用简单技术解决问题，直到问题变复杂。 领域驱动设计（Domain Driven Design，DDD）是 Eric Evans 提出的从系统分析到软件建模的一套方法论。它要解决什么问题呢？就是将业务概念和业务规则转换成软件系统中概念和规则，从而降低或隐藏业务复杂性，使系统具有更好的扩展性，以应对复杂多变的现实业务问题。 DDD 到底讲了什么呢？它把你的思考起点，从技术的角度拉到了业务上。 DDD 分为战略设计（Strategic Design）和战术设计（Tactical Design）。 战略设计是高层设计，它帮我们将系统切分成不同的领域，并处理不同领域的关系。 战术设计，通常是指在一个领域内，在技术层面上如何组织好不同的领域对象。 学习领域驱动设计。 看到差距之后，我唯一能做的，就是自己下来偷偷练习。幸好，无论是快捷键也好，重构也罢，都是可以单独练习的。花上一段时间就可以提高到一定的水平。 入职新公司，了解的优先级是业务，技术（技术栈，技术架构，功能模块），团队运作（协作方式）。 了解一个项目，从大图景开始。大多数程序员习惯的工作方式，往往是从细节入手，很难建立起一个完整的图景，常常是“只见树木不见森林”，而我的方式则是从大到小、由外而内，将要了解的内容层层分解，有了大图景之后，很容易知道自己做的事情到底在整体上处于什么样的位置。   先尝试重构你的代码，尽可能在已有代码上做小步调整，不要走到大规模改造的路上，因为重构的成本是最低的。 如果你的“小模块”是一个系统，那就部署新老两套系统，在前面的流量入口做控制，逐步把流量从老系统转到新系统上去；如果“小模块”只在代码层面，那就要有一段分发的代码，根据参数将流程转到不同的代码上去，然后，根据开发的进展，逐步减少对老代码的调用，一直到完全不依赖于老代码。   要想代码腐化的速度不那么快，一定要在软件设计上多下功夫。一方面，建立好领域模型，另一方面，寻找行业对于系统构建的最新理解。 改造遗留系统，一个关键点就是，不要回到老路上。 只要产品还在发展，系统改造就是不可避免的。改造遗留系统，前提条件是要弄清楚现状，知道系统为什么要改造，是架构有问题，还是领域模型混乱，只有知道根因，才可能有的放矢地进行改造。 改造遗留系统，我给你几个建议：  构建测试防护网，保证新老模块功能一致； 分成小块，逐步替换； 构建好领域模型； 寻找行业中关于系统构建的最新理解。  小步改造遗留系统，不要回到老路上。 IT 行业在国内的大发展也就最近20多年的事，行业里很少有走过完整职业生涯的程序员。也正是因为如此，我们经常会产生了各种焦虑：  我刚刚入行时，有人问，程序员能做到30岁吗？ 我快30岁时，有人问，35岁还能做程序员吗？ 我35岁时，讨论变成了40岁的程序员该怎么办。    有了“一专”，“多能”才是有意义的，否则，就是低水平重复，而这正是很多人职业生涯不见起色的真正原因。 这里的“专”不是熟练，而是深入。你可能是个有着10年丰富经验的程序员，但实际上只不过是重复了10年解决同样难度的问题而已，这根本就不算深入，也就没有做到真正意义上的“一专”。 当你有了“一专”，拓展“多能”，就会拥有更宽广的职业道路。比如，我拥有了深厚的技术功底，通晓怎么做软件：  如果还能够带着其他人一起做好，就成了技术领导者。 如果能够分享技术的理解，就有机会成为培训师。 如果能够在实战中帮助别人解决问题，就可以成为咨询师。  反过来，当你有了“多能”，也可以拓宽你的视野，帮你认清自己的“一专”怎样更好地发挥价值，而不是狭隘地认为自己有了技术，就已经天下尽在掌握了。视野窄，缺乏大局观，也成为了许多程序员再进一步的阻碍。 既然要朝着行业中的专家方向努力，那你就得知道行业中的专家是什么样。我的一个建议是，向行业中的大师学习。读这些大师写的书的一个好处在于，你的视野会打开，不会把目标放在“用别人已经打造好的工具做一个特定的需求”，虽然这可能是你的必经之路，但那只是沿途的风景，而不是目标。\n 怎么才能让自己的水平不断提高呢？找一个好问题去解决，解决了一个好的问题能够让你的水平快速得到提升。什么是好问题？就是比你当前能力略高一点的问题，比如：\n 如果你还什么都不会，那有一份编程的工作就好。 如果你已经能够写好普通的代码，就应该尝试去编写程序库。 如果实现一个具体功能都没问题了，那就去做设计，让程序有更好的组织。 如果你已经能完成一个普通的系统设计，那就应该去设计业务量更大的系统。    最内层是舒适区（Comfort Zone），置身其中会让人感觉良好，但也会因为没有挑战，成长甚微，你可以把它理解成做你最熟悉的事情。 最外层是恐慌区（Panic Zone），这是压力极大的地方，完全超出了你的能力范围，你在其中只会感到无比的焦虑。 中间的是学习区（Learning Zone），事情有难度，又刚好是你努力一下可以完成的，这才是成长最快的区域。 IT 行业依然是一个非常有前景的行业，但想在这条路上走好，需要我们成为 “T ”型人才，也就是“一专多能”。一专多能的前提是“一专”，让自己成为某个方面的专家。这个专家要放在行业的标准去看，这才能降低因为一个公司的波动而造成的影响。 成为行业专家，要向行业的大师学习，给自己定下一个高的目标，然后是脚踏实地，找适合自己的问题去解决，让自己一直在学习区成长。 在学习区工作和成长。 外部系统对你来说，应该只是一个接口。 能模拟的就模拟，能本地的就本地。 关于外部系统的测试，你可以先通过接口隔离开来，然后，通过模拟服务或本地可控的方式进行测试。 所谓的算法优化，其实就是尽可能利用已知的信息，少做不必要的事。 我在这个专栏真正探讨的主题是，有效工作。 有效工作，需要我们把力量聚焦到正确的地方，做本质复杂度（Essential Complexity）的事情，少做无意义的事情。 怎么才能有效工作呢？小结一下就是：  拓展自己的上下文，看到真正的目标，更好地对准靶子，比如，多了解用户，才不至于做错了方向；站在公司的层面上，才知道哪个任务优先级更高；站在行业的角度，而不局限于只在公司内成为高手，等等。 去掉不必要的内容，减少浪费，比如，花时间分析需求，不做非必要的功能；花时间做好领域设计，别围着特定技术打转；花时间做好自动化，把精力集中在编码上，等等。 要想有效工作，有两点非常重要。一方面，意识上要注意自己工作中无效的部分。这就像一个开关，拨过去就好了。另一方面，要构建自己关于软件开发的知识体系，这是要花时间积累的。   \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/categories/%E7%AE%A1%E7%90%86/",
	"title": "管理",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/gallery/cartoon/",
	"title": "Cartoon",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "cartoon gallery",
	"content": "Sample images from Pixabay\n"
},
{
	"uri": "http://rudy.org.cn/gallery/",
	"title": "Galleries",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/gallery/photo/",
	"title": "Photo",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "photo gallery",
	"content": "Sample images from Pixabay\n"
},
{
	"uri": "http://rudy.org.cn/pt/dir/fourth/",
	"title": "Fourth",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "My fourth presentation",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/pt/",
	"title": "Presentations",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Presentation list with reveal.js",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/series/",
	"title": "Series",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/pt/third/",
	"title": "Third",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "My third presentation",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/pt/second/",
	"title": "Second",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "My second presentation",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/pt/first/",
	"title": "First",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "My first presentation",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/tags/algorithm/",
	"title": "algorithm",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_algorithm/",
	"title": "数据结构与算法",
	"tags": ["algorithm"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 常见数据结构  栈，队列，链表，树，图 集合，字典，散列表   数据结构 数据存储与内存时，数据结构就是数据的顺序和位置关系，目的是提高内存利用率。  链表 数据访问复杂 数据添加或删除方便，只需该改变指针 每个数据都有一个“指针”，它指向下一个数据的内存地址 分类  单向 双向缺点 指针数的增加导致存储空间需求增加 添加或删除数据时需要改变更多指针指向 循环 链表尾部指针指向头部  数组 数据访问简单，通过下标访问 添加或删除数据复杂 栈 last in first out 适合访问最新数据。 深度优先搜索 队列 first in first out 先来的数据先处理。 广度优先搜索 堆 图的树形结构，顶端的数据始终最小，用于实现优先队列 优先队列只从最小值开始处理 子结点大于父节点 二叉树 图的树形结构，每个结点最多2个子结点。 每个结点的值大于其左子树上任意一个结点的值 每个结点的值小于其右子树上任意一个结点的值   常见算法 递归，排序，查找\n 排序  冒泡 选择 插入 堆 归并 快速  数组的查找  线性 二分  图的搜索  广度优先 v8 垃圾回收 深度优先 dom diff   复杂度分析  时间 处理数据所需要的时间，算法的执行效率  常见复杂度  常数阶 O(1) 对数阶 O(logN) 线性阶 O(n) 线性对数阶 O(nlogN) 平方阶 O(n^2) 立方阶 O(n^3) 指数阶 O(2^n)  一层循环 O(n), 二层循环 O(n^2) 二分 O(logN)  空间 处理数据所需要的内存  算法思维  分治，贪心，动态规划 养成算法思维是一个长期的过程，多思考多练习  问题规模缩小，动态规划 问题分解，二分   前端场景  前端核心是dom,dom以树为基础 手写dom diff算法  \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/posts/life/life_liangning-thinking/",
	"title": "创业者对《西游记》的另一种感悟",
	"tags": ["keep thinking"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 梁宁 作为一个创业者，回头再看《西游记》，另有一番体会。\n当唐僧到达西天的时候，他突然发现，其实一直以来，只有他孤身一人走在取经路上。\n没有孙悟空、没有猪八戒、没有沙和尚，所有的角色，都是他幻想出来陪伴自己的另一个自己。\n孙悟空，是那个无所畏惧、永不服输，上天下海寻求解决问题的自己。\n猪八戒，是那个真实的人性，会害怕、想退缩，也想舒服一点放松一点的自己。\n而沙和尚，更是个有意思的角色，创业的漫漫长路，你内心觉得自己是孙悟空，其实别人看你是沙和尚。一个没有什么特别资质、闷着头、一步一步向前走的笨家伙。\n唐僧呢？也许你在外头，看上去是孙悟空，是猪八戒，或者沙和尚，而你的内心，只能是唐僧。\n唐僧就是啥本事都可以没有，但有一个使命，一念执着。\n他说：我要去西天取经。\n一路上，他哭过，绝望过，软弱过，向人求救，但从来没有说过一句：我们放弃吧，我们回家。\n因为你的使命，你的执着，才会召唤力量，大山和沙漠都不能阻挡，满天神佛都会来帮你。\n所以，最强大的，不是悟空，是唐僧；最强大的，不是技能，是使命。\n这就是我在《增长思维》中谈的，可以撬动增长杠杆的那个支点。\n所以我说，成功不是干出来的，是活出来的。\n让你真实感知世界的，不是你头脑中的知识，而是你的伤口。\n让你强大到可以撬动这个世界的，不是你的技能，而是你的使命。\n“使命”这个词，从字面上看，就是“你怎么使你这条命”。\n唐僧这条命，就是拿来去西天取经的。取经人，死在取经路上，无怨无悔。这就是使命。\n不知不觉，我们这群伴随中国IT互联网成长起来的人，都走近了知天命之年。就是会开始想，自己这条命，到底是拿来做什么的。\n生命就是时间，这个动作，那个动作，这个项目，那个项目，一切都要花时间。而生命的能量就不知不觉地耗散在一件又一件的事情里。\n我的体会  静静的一想，原来我也已过而立之年，距离不惑也不是遥不可及，偶然间读了梁宁关于《西游记》的感悟，让我想起来曾经看过的一部电影《美丽心灵》，相似之处在于人格分裂的描述。以前不是很懂梦想和努力，也不明白很多人为了一种信念坚持做一件事很多年，阿甘为什么会成功，其实他不聪明，单亲家庭，而且还有残疾，但是他却成了美国梦的一种。其实你现在会什么并不重要，重要的是你的梦想是什么，也就是你准备为什么事业而终身奋斗，人活着永远不要丢失方向。\n 如果你一直等的伯乐没有出现，可能那个伯乐就是自己一直幻想的另一个自己。\n  \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_chrome-extension-note/",
	"title": "chrome插件笔记",
	"tags": ["plugin"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " chrome extenstion是一个使用web技术开发、用来增强浏览器功能的插件，它实际上是一个由html,js,css,images等资源组成的.crx压缩包。\nmanifest.json 用来描述插件的元数据\n3种资源文件  browser_action/page_action\n 插件的popup窗口 browser_action针对所有页面，page_action针对指定页面  background\n 插件的js运行环境 消息传递机制和其它页面通信 sendMessage/onMessage 无限制跨域  content_scripts\n 在当前页面运行的js文件，负责操作页面DOM 和当前页面js处于不同上下文   长链接  background和popup\n 可以直接互相调用，不用消息传递  background和content\n postMessage+connect   \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/plugin/",
	"title": "plugin",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/archive/",
	"title": "Archive",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Archive Page",
	"content": "archive page\n"
},
{
	"uri": "http://rudy.org.cn/posts/life/life_lyrics/",
	"title": "有关人生的歌词",
	"tags": ["keep thinking"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 海阔天空 一生要走多远的路程\n经过多少年\n才能走到终点\n梦想需要多久的时间\n多少血和泪\n才能慢慢实现\n天地间任我展翅高飞\n谁说那是天真的预言\n风中挥舞狂乱的双手\n写下灿烂的诗篇\n不管有多么疲倦\n潮来潮往世界多变迁\n迎接光辉岁月\n为它一生奉献\nBlowing in the Wind 答案在风中飘 How many roads must a man walk down\n一个男人还要经历多少的干戈与磨难\nBefore they call him a man\n才能被称为真正的男子汉\nHow many seas must a white dove sail\n一只和平鸽还要飞越几重巨浪汪洋\nBefore she sleeps in the sand\n才能安眠于宁静海滩\nHow many years must a mountain exist\n一座高山还要守望多少无情岁月\nBefore it is washed to the sea\n才能见证沧海桑田\n\n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/posts/life/life_rendada/",
	"title": "听任大大的话",
	"tags": ["keep thinking"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 任大大  我不是从小构建了什么做大事的想法，只是孜孜不倦地对一件事情研究，对一件事情的理解太集中了就容易产生成功。贫穷没有使我获得什么必须成功的要素。 那时的痛苦，还包括身份证明的痛苦，因为我们是私营企业，那时没有政治地位，还赚钱，是受怀疑的。今天的痛苦，是美国打击华为的市场、商业，但打击不了我们的生命。 痛苦并没有什么收获。如果我们“东一榔头，西一棒子”，注定是失败的，应该坚定不移在一个正确方向上去努力，才有可能成功，后来我们把奋斗目标叫做“方向大致正确”，绝对正确的方向不存在，大致正确就可以了。第二，组织要充满活力，对准一个地方。这是在科学技术上押注上押赌，有可能赌错。幸亏赌对了，压力就释放了。后来就不想自杀了。 面子是虚的，不能当饭吃  只有真正经历过贫穷的人，才会迫切地想要成功。任正非常说：“我要的是成功，面子是虚的，不能当饭吃，面子是给狗吃的。”但其实，这句话的源头是其父亲任摩逊的口头禅，即“面子是给狗吃的”！ 任正非父亲任摩逊，是一个知识分子。文革时间里，他被扣上“臭老九”的帽子，身陷囹圄。受难期间，任摩逊常被反动派推到大街上游行示众，头上戴着高帽子，脸上被涂抹得漆黑，其惨景令人内心震颤。 但父亲、母亲一边忍受羞辱，一边工作，照顾任正非的弟弟和妹妹。无论条件多么艰苦，也都要抽空读书、学习。 这段难忘的岁月，让任正非初尝了人生艰辛的一面。 任正非的青少年时代，全家9口人，靠父母的微薄收入度日。加上当时全国经济处于困难时期，粮食严重短缺，全家人常常饿肚子。19岁前，任正非没穿过一件新衣服。因为孩子多，每到新学期，母亲就为学费发愁，经常要靠向人借钱维持，有时还借不到，因为别人也一样困难。尽管日子十分难过，任摩逊和妻子还是坚持让7个孩子都上学读书。 任正非每天饥肠辘辘，最大的愿望就是吃上一个白面馒头。而直到他高考前，这个愿望都没能达成，倒是可以吃上一个小小的玉米饼了。而任正非也知晓，“这小小的玉米饼来之不易，是从父母、弟妹的嘴里抠出来的，我无以报答他们。” 家里所遭遇的一切，任正非都历历在目。他觉得痛心疾首，自己愧对父母。任正非想，如果真要做一个孝子，就得马上回去，继续在学业上深造。 任摩逊为了鼓励任正非，把自己穿的翻毛皮鞋给他，希望他在大学岁月里，不要虚度。 多年以后，任正非回忆起来这一幕说：“我当年穿走父亲的皮鞋，没念及父亲那时是做苦工的，泥里水里冰冷潮湿，他更需要鞋子。现在回忆起来，感觉自己太自私。” 在文革期间坐了10年牢，出狱后，任正非父亲任摩逊二话没说，继续出任中学校长，一直干到75岁。父亲让任正非看到了什么是“活下去的倔强”。 所以任正非经常感慨：“我真正能理解活下去这句话的含义！”“你是想吃饱肚子还是出名？”“知识分子不要脸才能进步。” 这种艰难的岁月，让任正非形成了，活着就是一切的信念。   我的感悟  今年任大大的采访特别多，如果不是华为遇到了危机，可能很难有这样的机会了解他的思想，华为表现出的生命力是令人震撼的，人生要有目标，就像电影《银河补习班》里说的，\u0026rdquo;人生就像射箭，梦想就像箭靶子，连箭靶子都找不到在哪，你每天拉弓有什么用。\u0026rdquo;\n 要学习的不仅是知识，还有思想，还有方法。 永远不要停止思考，永远不认输。 清华北大只是过程，不是目的。  不耻下问才能进步，一个人如果可以保持空杯心态，善于利用周边的资源，那么他的进步肯定可以更高效，这样的模式可以称之为“在请教中快速掌握，在实践中快速落地，在分享中加深理解”。\n  \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/editor/",
	"title": "editor",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_editor-design/",
	"title": "web编辑器方案",
	"tags": ["editor"],
	"categories": [],
	"series": [],
	"description": "",
	"content": "页面 = HTML Tree (DOM) + 静态Data + 动态逻辑Javascript\n页面可视化编辑本质上是用可视化的方式对页面的DOM、静态Data和动态逻辑javascript进行操作，从而完成页面的生成。\n前端服务化，为前端小白，运营/产品人员,以及后台开发人员提供开发前端页面的能力。\n 系统粒度  HTML Tree编辑 Component Tree编辑 静态Data编辑 动态逻辑Javascript编辑  面向群体  前端小白 运营/产品人员 后台开发人员  编辑自由度  页面 组件   核心原理：模板 + 配置数据 = 页面\n最佳实践\n 数据格式Json Scheme 组件化和模板化 编辑与组件、模板和框架解耦 框架负责数据管理  数据包括组件数据和业务数据，管理包括保存数据和读取数据方式。  分析数据管理的简单场景和复杂场景，确定边界 组件暴露所有属性和事件 渐进式体验 数据驱动  数据现在是什么样子 数据在哪里被修改了   \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/standard/",
	"title": "standard",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_standard-design/",
	"title": "前端规范方案",
	"tags": ["standard"],
	"categories": [],
	"series": [],
	"description": "",
	"content": "1.项目组织结构\n 目录结构 配置文件 README  2.代码规范\n 命名规范 Html规范 Javascript规范 CSS规范  3.统一代码风格\n 利用Lint工具，配置语法检测规则来对代码风格进行检测。 e.g. js lint, css lint  4.开发工具规范\n4.1 编辑器\n Visual Studio Code Web Storm  4.2 统一插件\n EditorConfig Lint 单词拼写检查 路径补全 代码自动补全 Emmet 代码格式化  4.3 README搭建指南\n 运行环境 依赖项 项目安装指南 项目结构图 参考资料 维护人员联系方式  5.代码提交信息规范\n [任务名称/编码] [类型] 提交人 : 详细信息。  类型说明：\n 文档 功能 修复 重构 样式 测试  6.流程化\n6.1 代码预处理 - Lint + Git Hooks - Lint + Webhook\n6.2 人工检查代码 - Code Review - Pull Request\n7.工具\n 代码扫描工具 Sonar 测试方案  \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/analysis/",
	"title": "analysis",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_analysis-design/",
	"title": "web监控平台方案",
	"tags": ["analysis"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 背景 为了定位Web线上问题，需要对页面异常信息进行收集，分析和定位问题原因，以提升用户体验和产品运营效率。\n维度 前端监控的维度主要分为以下3个方面：\n 性能 异常 用户行为  原理  监听window对象的onerror事件。 使用try catch语句。  案例  [开源] 腾讯 badjs 文档说明详细，提供完整解决方案，项目落地10+。  日志功能 上报功能 统计功能 邮件功能  [收费] sentry  代码开源 价格  [收费] fundebug  价格  [收费] 阿里云ARMS-前端监控  主动监控 慢会话追踪 搜索报错明细 出错行为还原  [收费] 蒲公英 frontjs  价格  [无维护] 淘宝 JSTracker  参考README  [未开源] 阿里 FdSafe [无维护] 支付宝 saijs  javascript异常文档   需求分析  错误收集\n 错误信息 资源加载错误 运行时错误 性能指标 页面加载时长 首次渲染时长 首次内容渲染时长 首次有效渲染时长 \u0026hellip; 日志数据   上报策略\n ajax 跨域 CORS协议 image对象   日志采集与存储\n 数据过滤 节流  告警功能\n 最大最小值 错误累计数 异常等级 自定义  邮件短信通知\n 错误定位与复现\n 管理后台数据可视化\n  \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/vue/",
	"title": "vue",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/frontend/frontend_vue-note/",
	"title": "vue学习笔记",
	"tags": ["vue"],
	"categories": [],
	"series": [],
	"description": "",
	"content": "npm root -g\nnpm config set prefix [path]\nnpm list /ls\n—save -S //生产环境 默认\n—save-dev -D //开发环境\nnpm view [module] version/versions\nnpm get registry\nnpm config set registry [url]\nV-model //vm\nv-once\nv-html\nv-bind：属性 = 数据 // ：属性 = 数据\nv-on：事件 = 函数 // @ 事件 = 函数\n函数和计算属性区别 1. 计算属性有缓存 2. 支持双向绑定 get/set\nVue instance { el, data, methods, compute, watch }\nclass,style使用v-bind绑定//string, object,array\nv-show // css display属性实现，仍存在dom中，频繁切换使用，否则使用v-if\nv-for // 使用时添加v-bind:key\n$event//event原生事件\n事件修饰符 .stop .prevent .once\nv-on:keyup.按键名 //按键修饰符\nv-pre // 忽略Vue编译，提升性能\nv-text/v-clock //隐藏双大括号\ndirectives //自定义全局或局部指令\n\n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/tags/finance/",
	"title": "finance",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/posts/manage/manage_digital-economy/",
	"title": "有关数字经济的推论判断",
	"tags": ["finance"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " 重要观点 李彦宏\n 数字经济在经历了PC的发明与普及，PC互联网，移动互联网这三个阶段后，正在进化到以人工智能为核心驱动力的智能经济新阶段，智能经济将给全球经济带来新的活力，是拉动全球经济重新向上的核心引擎。  丁磊\n 未来企业的机会，要走向上游，竞争会从拼人口红利，走向拼技术。技术创新，是数字经济最牢固的支撑。未来AI等技术型的公司，会成为新的主流，和各行各业做大跨度的融合。现在对教育、医疗、制造业和农业等领域投入的公司，未来会有更好的机会。  周鸿祎\n 新技术、新科技确实给人类带来的极大的便利和自动化，但同时，也给网络安全带来的巨大挑战和风险。  陆奇\n 目前面临的重大挑战是数据成为人工智能时代的核心产能，正如软件开发是上一时代的核心产能。今天以数据和机器学习为核心的时代，需要共同努力探索，建立新一代像开源软件一样的机制，不但能保护好数据隐私和数据的价值，同时能提供更强的合作机制。  沈南鹏\n 红杉作为全球的科技基金，过去47年以来，我们始终聚焦在数字经济领域。今天我们看到了数字经济出现了两个趋势。第一个是全球化越来越明显，不仅是在中国、美国，其他诸多国家和地区，比如印度、东南亚、中东，甚至拉美、非洲，都出现了一批发展迅速的独角兽；第二个是数字经济几乎渗透到所有领域，每个行业都在互联网化、数字化、云化。  杨旭\n 我非常赞赏我们上一任CEO说过的一句话，未来的数字就是“石油”。大家都在谈的数字经济，实际上是从数据产生、传输到分析、挖掘，最后增值的过程。数字经济最关键的是创新、增值的部分。如果不增值，这个数据一点用都没有。现在大家谈物联网、5G，5G和以前4G、3G最大的不同在于，以前是人在上网，今后是物在上网，而且物是智能的物，这些物会产生更多的数据。数据又需要被提取出来进行分析，这是得益于人工智能更多技术的辅助。在英特尔，我们是做跟踪数据的，研究分析数据、处理数据。从前端产生数据、传输到后端进行分析、挖掘、人工智能，到存储和最后实现增值，这个过程中，我想每一个企业都在研究，数据产生和数据增值过程中的机会在哪儿，怎样使数字经济能够推动未来的经济发展，这是很关键的。  我的理解 数据就是未来，随着5G到来，利用人工智能和互联网技术来升级传统行业将是一个大趋势，通过对行业数据收集，分析和挖掘，从而找到新的增值点，提供新的经济发展动力。我想这就是数字经济的含义，即通过某种方法从大数据中找到有价值的信息。就个人而言，首先应该确定目标，然后不断储备相关知识，解决到达目标过程中遇到的问题。\n 方向 金融大数据  \n ·End· \n"
},
{
	"uri": "http://rudy.org.cn/categories/%E9%87%91%E8%9E%8D/",
	"title": "金融",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://rudy.org.cn/about/",
	"title": "Rudy",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": " \nstay hungry, stay young ~ 保持好奇心，主动学习新事物，新知识和新技能。 对不确定性保持乐观。 不甘于平庸。 不傲娇，要能延迟满足感。 对重要的事情有判断力。 无论工作或生活，要有创业心态。 最重要的是“解决问题”，而不是“解释原因”。 聚焦长远目标，看淡眼前利益。 用心经营自己这家“公司”。 做事坚持“先能用，再有用，再好用，后好看”。 时光是最无情的刻刀，陪伴是最长情的告白。\nMy promise past shall always last.\n\n"
}]